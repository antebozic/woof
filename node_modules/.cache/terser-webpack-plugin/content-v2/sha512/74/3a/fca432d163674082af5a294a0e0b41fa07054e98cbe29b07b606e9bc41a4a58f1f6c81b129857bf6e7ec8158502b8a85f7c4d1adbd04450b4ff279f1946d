{"map":"{\"version\":3,\"sources\":[\"/Users/ante/Documents/projects/memory/src/NavBar.js\",\"/Users/ante/Documents/projects/memory/src/Card.js\",\"/Users/ante/Documents/projects/memory/src/Dog.js\",\"/Users/ante/Documents/projects/memory/src/MemoryGame.js\",\"/Users/ante/Documents/projects/memory/src/index.js\"],\"names\":[\"NavBar\",\"_ref\",\"onNewGame\",\"isFin\",\"attempts\",\"duration\",\"react_default\",\"a\",\"createElement\",\"onClick\",\"className\",\"id\",\"Card\",\"props\",\"style\",\"showing\",\"backgroundImage\",\"concat\",\"opacity\",\"filter\",\"border\",\"Dog\",\"CardState\",\"HIDDING\",\"SHOWING\",\"MATCHING\",\"MemoryGame\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"cards\",\"cardState\",\"HIDING\",\"backgroundColor\",\"shuffle\",\"state\",\"noClick\",\"isVis\",\"width\",\"timestart\",\"undefined\",\"click\",\"handleClick\",\"bind\",\"assertThisInitialized\",\"handleNewGame\",\"getAllDogs\",\"updatedWindowDimensions\",\"window\",\"innerWidth\",\"c\",\"setState\",\"length\",\"push\",\"arr\",\"i\",\"j\",\"temp\",\"Math\",\"floor\",\"random\",\"_this2\",\"dogs\",\"fetch\",\"then\",\"res\",\"json\",\"message\",\"setTimeout\",\"map\",\"objectSpread\",\"addEventListener\",\"_this3\",\"_this4\",\"prevState\",\"round\",\"Date\",\"getTime\",\"mapCardState\",\"idsToChange\",\"newCardState\",\"includes\",\"foundCard\",\"find\",\"showingCards\",\"ids\",\"hidingCards\",\"console\",\"log\",\"_this5\",\"loadClass\",\"require\",\"classNames\",\"hide\",\"show\",\"card\",\"src_Card_0\",\"key\",\"display\",\"src_NavBar_0\",\"src_Dog_0\",\"Component\",\"ReactDOM\",\"render\",\"MemoryGame_MemoryGame\",\"document\",\"getElementById\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React from 'react';\\nimport './NavBar.css';\\n\\nconst NavBar = ({onNewGame, isFin, attempts, duration}) => {\\n   if(!isFin){\\n    return(\\n        <header>\\n            <h2><a>Woof Woof Memory Game</a></h2>\\n            <nav>\\n                <li><a onClick={onNewGame} className=\\\"btn\\\" id=\\\"slide\\\">New Game</a></li>\\n            </nav>\\n        </header>\\n       )\\n   }\\n   else {\\n    return(\\n        <header>\\n            <h2><a>{attempts} attempts in {duration} sec, Woof!</a></h2>\\n            <nav>\\n                <li><a onClick={onNewGame} className=\\\"btn\\\" id=\\\"slide\\\">New Game</a></li>\\n            </nav>\\n        </header>\\n        )\\n   }\\n   \\n   \\n   \\n};\\n\\n\\n\\nexport default NavBar;\",\"import React from 'react';\\nimport './Card.css'\\n\\nconst Card = (props) => {\\n    let style = {};\\n    if (props.showing) {\\n        style.backgroundImage = `url(${props.backgroundImage})`\\n    }\\n    if (props.opacity) {\\n        style.filter = 'grayscale(100%)'\\n        style.border = '.18rem solid #000'\\n        style.opacity = '.9'\\n    } \\n    return (\\n        <div \\n            onClick={props.onClick}\\n            className=\\\"card-container\\\" style={style} \\n        >\\n        </div>\\n    )\\n};\\n\\nexport default Card;\",\"import React from 'react';\\nimport './Dog.css';\\n\\nconst Dog = (props) => {\\n    return (\\n        <div className=\\\"bg\\\">\\n  <div id=\\\"dog\\\">\\n    <div className=\\\"head\\\">\\n      <div className=\\\"mask mask-head\\\">\\n         <div className=\\\"nose\\\"></div>\\n        <div className=\\\"eye\\\"></div>\\n      </div>\\n     <div className=\\\"ear\\\"></div>\\n    </div>\\n      \\n    <div className=\\\"body\\\">\\n      <div className=\\\"shirt\\\"></div>\\n      <div className=\\\"mask-body\\\">\\n        <div className=\\\"leg\\\"></div>\\n      </div>\\n      <div className=\\\"foot\\\"></div>\\n    </div>\\n    <div className=\\\"back-body\\\">\\n      <div className=\\\"mask-back-body\\\"></div>\\n    </div>\\n    <div className=\\\"mask-tail\\\"></div>\\n    </div>\\n\\n<div className=\\\"spinner\\\">\\n  <div className=\\\"bounce1\\\"></div>\\n  <div className=\\\"bounce2\\\"></div>\\n  <div className=\\\"bounce3\\\"></div>\\n</div>\\n\\n  </div>\\n\\n    )\\n}\\n\\nexport default Dog;\",\"import React, {Component} from 'react';\\nimport NavBar from './NavBar';\\nimport Card from './Card';\\nimport Dog from './Dog';\\nimport './MemoryGame.css';\\nimport axios from 'axios';\\n\\n\\nconst CardState = {\\n    HIDDING: 0,\\n    SHOWING: 1, \\n    MATCHING: 2\\n}\\n\\nexport default class MemoryGame extends Component {\\n    constructor(props) {\\n        super(props);\\n\\n\\n        //the cards I'm using for my state\\n        let cards = [\\n            {id: 0, cardState: CardState.HIDING, backgroundColor: 'red', backgroundImage: ''},\\n            {id: 1, cardState: CardState.HIDING, backgroundColor: 'red', backgroundImage: ''},\\n            {id: 2, cardState: CardState.HIDING, backgroundColor: 'navy', backgroundImage: ''},\\n            {id: 3, cardState: CardState.HIDING, backgroundColor: 'navy', backgroundImage: ''},\\n            {id: 4, cardState: CardState.HIDING, backgroundColor: 'yellow', backgroundImage: ''},\\n            {id: 5, cardState: CardState.HIDING, backgroundColor: 'yellow', backgroundImage: ''},\\n            {id: 6, cardState: CardState.HIDING, backgroundColor: 'green', backgroundImage: ''},\\n            {id: 7, cardState: CardState.HIDING, backgroundColor: 'green', backgroundImage: ''},\\n            {id: 8, cardState: CardState.HIDING, backgroundColor: 'black', backgroundImage: ''},\\n            {id: 9, cardState: CardState.HIDING, backgroundColor: 'black', backgroundImage: ''},\\n            {id: 10, cardState: CardState.HIDING, backgroundColor: 'purple', backgroundImage: ''},\\n            {id: 11, cardState: CardState.HIDING, backgroundColor: 'purple', backgroundImage: ''},\\n            {id: 12, cardState: CardState.HIDING, backgroundColor: 'pink', backgroundImage: ''},\\n            {id: 13, cardState: CardState.HIDING, backgroundColor: 'pink', backgroundImage: ''},\\n            {id: 14, cardState: CardState.HIDING, backgroundColor: 'lightsky', backgroundImage: ''},\\n            {id: 15, cardState: CardState.HIDING, backgroundColor: 'lightsky', backgroundImage: ''}, \\n            {id: 16, cardState: CardState.HIDING, backgroundColor: 'brown', backgroundImage: ''},\\n            {id: 17, cardState: CardState.HIDING, backgroundColor: 'brown', backgroundImage: ''},\\n            {id: 18, cardState: CardState.HIDING, backgroundColor: 'white', backgroundImage: ''},\\n            {id: 19, cardState: CardState.HIDING, backgroundColor: 'white', backgroundImage: ''}\\n        ];\\n\\n        cards = this.shuffle(cards);\\n\\n        this.state = {\\n            cards, noClick: false, isVis: true, isFin: false, width: 0, timestart: undefined, attempts: undefined, duration: undefined, click: 0\\n        };\\n\\n        this.handleClick = this.handleClick.bind(this);\\n        this.handleNewGame = this.handleNewGame.bind(this);\\n        this.getAllDogs = this.getAllDogs.bind(this);\\n        this.shuffle = this.shuffle.bind(this);\\n        this.updatedWindowDimensions = this.updatedWindowDimensions.bind(this);\\n    }\\n\\n    updatedWindowDimensions() {\\n        if(window.innerWidth < 520) {\\n            let cards = this.state.cards.filter( c =>\\n                c.backgroundColor !== \\\"white\\\");\\n            this.setState({\\n                cards, width: window.innerWidth\\n            })\\n        }\\n        else if(window.innerWidth > 520 && this.state.cards.length !== 20) {\\n            let cards = this.state.cards;\\n            cards.push(\\n                {id: 18, cardState: CardState.HIDING, backgroundColor: 'white', backgroundImage: ''},\\n                {id: 19, cardState: CardState.HIDING, backgroundColor: 'white', backgroundImage: ''}\\n            );\\n            this.setState({cards, width: window.innerWidth})\\n        }\\n    }\\n\\n\\n    shuffle(arr) {\\n        var i,\\n            j,\\n            temp;\\n        for (i = arr.length - 1; i > 0; i--) {\\n            j = Math.floor(Math.random() * (i + 1));\\n            temp = arr[i];\\n            arr[i] = arr[j];\\n            arr[j] = temp;\\n        }\\n        return arr;    \\n    };\\n\\n    getAllDogs() {\\n        let dogs = []\\n        for(let i=0; i<10; i++) {\\n            fetch('https://dog.ceo/api/breeds/image/random')\\n            .then(res => res.json())\\n            .then(res => dogs.push(res.message))\\n        }\\n        \\n    \\n        setTimeout(\\n          () => {\\n            let cards = this.state.cards.map( c => {\\n\\n                switch(c.backgroundColor) {\\n\\n                    case \\\"red\\\":\\n                    return {...c, backgroundImage: dogs[0]};\\n\\n                    case \\\"navy\\\":\\n                    return {...c, backgroundImage: dogs[1]};\\n\\n                    case \\\"yellow\\\":\\n                    return {...c, backgroundImage: dogs[2]};\\n\\n                    case \\\"green\\\":\\n                    return {...c, backgroundImage: dogs[3]};\\n\\n                    case \\\"black\\\":\\n                    return {...c, backgroundImage: dogs[4]};\\n\\n                    case \\\"purple\\\":\\n                    return {...c, backgroundImage: dogs[5]};\\n\\n                    case \\\"pink\\\":\\n                    return {...c, backgroundImage: dogs[6]};\\n\\n                    case \\\"lightsky\\\":\\n                    return {...c, backgroundImage: dogs[7]};\\n\\n                    case \\\"brown\\\":\\n                    return {...c, backgroundImage: dogs[8]};\\n\\n                    case \\\"white\\\":\\n                    return {...c, backgroundImage: dogs[9]};\\n\\n                    default: \\n                    return c;\\n\\n                }\\n        })\\n            this.setState({cards, isVis: false})\\n          }, 3000\\n        )\\n    }\\n\\n    componentDidMount() {\\n        this.getAllDogs();\\n        this.updatedWindowDimensions();\\n        window.addEventListener(\\\"resize\\\", this.updatedWindowDimensions);\\n        \\n    }\\n\\n    handleNewGame() {\\n        // 1.copy all state and set all cards to state of hiding\\n        // 2.shuffle the cards\\n        this.setState({isVis: true})\\n        setTimeout(() => {\\n            this.setState({isVis: false})\\n        }, 3000)\\n        let cards = this.state.cards.map(c => ({\\n            ...c,\\n            cardState: CardState.HIDING\\n        }));\\n\\n        cards = this.shuffle(cards);\\n\\n        this.setState({cards, timestart: undefined, isFin: false, duration: undefined, attempts: undefined, click: 0});\\n\\n        this.getAllDogs();\\n\\n    }\\n\\n    handleClick(id) {\\n        // console.log(Math.round(new Date().getTime()/1000))\\n        //adding click\\n        this.setState((prevState, props) => {\\n            return {\\n                click: prevState.click+1\\n            }\\n        })\\n        //adding first clikc timestamp\\n        if(this.state.click === 1) {\\n            this.setState({\\n                timestart: Math.round(new Date().getTime()/1000)\\n            })\\n        }\\n        // 1.if two cards are visible and they don't match, put back\\n        // 2.if two cards are visible and they match, they should stay\\n\\n        const mapCardState = (cards, idsToChange, newCardState) => {\\n            return cards.map(c => {\\n                if (idsToChange.includes(c.id)) {\\n                    return {\\n                        ...c, \\n                        cardState: newCardState\\n                    };\\n                }\\n                return c;\\n            });\\n        }\\n        //grabbing the card we want out of the array\\n\\n        const foundCard = this.state.cards.find(c => c.id === id);\\n\\n        //prevents flipping card if it's noClick || matching || showing\\n        if(this.state.noClick || foundCard.cardState !== CardState.HIDING) {\\n            return;\\n        }\\n\\n        let noClick = false;\\n\\n        //filters all cards, but one that's clicke has SHOWING now\\n        let cards = mapCardState(this.state.cards, [id], CardState.SHOWING);\\n\\n        //finds only cards with SHOWING\\n        const showingCards = cards.filter(c => c.cardState === CardState.SHOWING);\\n    \\n        //grabbing ids from showingCards\\n        const ids = showingCards.map(c => c.id);\\n\\n\\n        if (showingCards.length === 2 && \\n            showingCards[0].backgroundColor === showingCards[1].backgroundColor) {\\n                cards = mapCardState(this.state.cards, ids, CardState.MATCHING);  \\n            } \\n        else if (showingCards.length === 2) {\\n           let hidingCards = mapCardState(this.state.cards, ids, CardState.HIDING);\\n                \\n            noClick = true;\\n\\n            this.setState({cards, noClick}, () => {\\n                setTimeout(() => {\\n                    // set the state of the cards to HIDING after 1.5 seconds\\n                    this.setState({cards: hidingCards, noClick: false});\\n                }, 1200);\\n            }\\n            );   \\n        }\\n        //check for the game end \\n        let allMatching = cards.filter(c => c.cardState === CardState.MATCHING)\\n        if (allMatching.length === cards.length) {\\n            let duration = Math.round(new Date().getTime()/1000) - this.state.timestart;\\n            let attempts = Math.round(this.state.click / 2);\\n            this.setState({\\n                duration, attempts, isFin: true\\n            }, () => {\\n                console.log(this.state.duration)\\n                console.log(this.state.attempts)\\n            })\\n        }\\n        this.setState({cards, noClick});\\n    }\\n\\n\\n    \\n    render() {\\n        var classNames = require('classnames');\\n        var loadClass = classNames(\\n            \\\"load\\\",{\\n                \\\"hide\\\": !this.state.isVis, \\n                \\\"show\\\" : this.state.isVis\\n            }\\n        )\\n        const cards = this.state.cards.map((card) => (\\n            <Card \\n                key={card.id} \\n                opacity={card.cardState === CardState.MATCHING}\\n                showing={card.cardState !== CardState.HIDING} \\n                backgroundColor={card.backgroundColor} \\n                backgroundImage={card.backgroundImage}\\n                onClick={() => this.handleClick(card.id)}\\n            />\\n        ));\\n\\n\\n        let style = {};\\n        if (!this.state.isVis) {\\n            style.display = 'grid'\\n        }\\n        else if(this.state.isVis) {\\n            style.display = 'none'\\n        }\\n\\n        return (\\n            <div className=\\\"container\\\">\\n                <NavBar onNewGame={this.handleNewGame} \\n                        isFin={this.state.isFin} \\n                        duration={this.state.duration}\\n                        attempts={this.state.attempts}\\n                />\\n                <div className=\\\"content\\\">\\n                <div className=\\\"cardsContainer\\\" style={style}>\\n                {cards}\\n                </div>\\n                </div>\\n                <div className={loadClass}>\\n                <Dog />\\n                </div>\\n            </div>\\n        );\\n    }\\n}\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport MemoryGame from './MemoryGame';\\n\\n\\nReactDOM.render(<MemoryGame />,\\n     document.getElementById('root')\\n);\\n\\n\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{17:function(e,a,t){e.exports=t(53)},22:function(e,a,t){},24:function(e,a,t){},26:function(e,a,t){},28:function(e,a,t){},30:function(e,a,t){},53:function(e,a,t){\"use strict\";t.r(a);var n=t(0),r=t.n(n),c=t(11),i=t.n(c),o=(t(22),t(2)),d=t(12),s=t(13),l=t(15),u=t(14),m=t(16),g=t(1),b=(t(24),function(e){var a=e.onNewGame,t=e.isFin,n=e.attempts,c=e.duration;return t?r.a.createElement(\"header\",null,r.a.createElement(\"h2\",null,r.a.createElement(\"a\",null,n,\" attempts in \",c,\" sec, Woof!\")),r.a.createElement(\"nav\",null,r.a.createElement(\"li\",null,r.a.createElement(\"a\",{onClick:a,className:\"btn\",id:\"slide\"},\"New Game\")))):r.a.createElement(\"header\",null,r.a.createElement(\"h2\",null,r.a.createElement(\"a\",null,\"Woof Woof Memory Game\")),r.a.createElement(\"nav\",null,r.a.createElement(\"li\",null,r.a.createElement(\"a\",{onClick:a,className:\"btn\",id:\"slide\"},\"New Game\"))))}),k=(t(26),function(e){var a={};return e.showing&&(a.backgroundImage=\"url(\".concat(e.backgroundImage,\")\")),e.opacity&&(a.filter=\"grayscale(100%)\",a.border=\".18rem solid #000\",a.opacity=\".9\"),r.a.createElement(\"div\",{onClick:e.onClick,className:\"card-container\",style:a})}),h=(t(28),function(e){return r.a.createElement(\"div\",{className:\"bg\"},r.a.createElement(\"div\",{id:\"dog\"},r.a.createElement(\"div\",{className:\"head\"},r.a.createElement(\"div\",{className:\"mask mask-head\"},r.a.createElement(\"div\",{className:\"nose\"}),r.a.createElement(\"div\",{className:\"eye\"})),r.a.createElement(\"div\",{className:\"ear\"})),r.a.createElement(\"div\",{className:\"body\"},r.a.createElement(\"div\",{className:\"shirt\"}),r.a.createElement(\"div\",{className:\"mask-body\"},r.a.createElement(\"div\",{className:\"leg\"})),r.a.createElement(\"div\",{className:\"foot\"})),r.a.createElement(\"div\",{className:\"back-body\"},r.a.createElement(\"div\",{className:\"mask-back-body\"})),r.a.createElement(\"div\",{className:\"mask-tail\"})),r.a.createElement(\"div\",{className:\"spinner\"},r.a.createElement(\"div\",{className:\"bounce1\"}),r.a.createElement(\"div\",{className:\"bounce2\"}),r.a.createElement(\"div\",{className:\"bounce3\"})))}),I=(t(30),t(32),{HIDDING:0,SHOWING:1,MATCHING:2}),f=function(e){function a(e){var t;Object(d.a)(this,a),t=Object(l.a)(this,Object(u.a)(a).call(this,e));var n=[{id:0,cardState:I.HIDING,backgroundColor:\"red\",backgroundImage:\"\"},{id:1,cardState:I.HIDING,backgroundColor:\"red\",backgroundImage:\"\"},{id:2,cardState:I.HIDING,backgroundColor:\"navy\",backgroundImage:\"\"},{id:3,cardState:I.HIDING,backgroundColor:\"navy\",backgroundImage:\"\"},{id:4,cardState:I.HIDING,backgroundColor:\"yellow\",backgroundImage:\"\"},{id:5,cardState:I.HIDING,backgroundColor:\"yellow\",backgroundImage:\"\"},{id:6,cardState:I.HIDING,backgroundColor:\"green\",backgroundImage:\"\"},{id:7,cardState:I.HIDING,backgroundColor:\"green\",backgroundImage:\"\"},{id:8,cardState:I.HIDING,backgroundColor:\"black\",backgroundImage:\"\"},{id:9,cardState:I.HIDING,backgroundColor:\"black\",backgroundImage:\"\"},{id:10,cardState:I.HIDING,backgroundColor:\"purple\",backgroundImage:\"\"},{id:11,cardState:I.HIDING,backgroundColor:\"purple\",backgroundImage:\"\"},{id:12,cardState:I.HIDING,backgroundColor:\"pink\",backgroundImage:\"\"},{id:13,cardState:I.HIDING,backgroundColor:\"pink\",backgroundImage:\"\"},{id:14,cardState:I.HIDING,backgroundColor:\"lightsky\",backgroundImage:\"\"},{id:15,cardState:I.HIDING,backgroundColor:\"lightsky\",backgroundImage:\"\"},{id:16,cardState:I.HIDING,backgroundColor:\"brown\",backgroundImage:\"\"},{id:17,cardState:I.HIDING,backgroundColor:\"brown\",backgroundImage:\"\"},{id:18,cardState:I.HIDING,backgroundColor:\"white\",backgroundImage:\"\"},{id:19,cardState:I.HIDING,backgroundColor:\"white\",backgroundImage:\"\"}];return n=t.shuffle(n),t.state={cards:n,noClick:!1,isVis:!0,isFin:!1,width:0,timestart:void 0,attempts:void 0,duration:void 0,click:0},t.handleClick=t.handleClick.bind(Object(g.a)(Object(g.a)(t))),t.handleNewGame=t.handleNewGame.bind(Object(g.a)(Object(g.a)(t))),t.getAllDogs=t.getAllDogs.bind(Object(g.a)(Object(g.a)(t))),t.shuffle=t.shuffle.bind(Object(g.a)(Object(g.a)(t))),t.updatedWindowDimensions=t.updatedWindowDimensions.bind(Object(g.a)(Object(g.a)(t))),t}return Object(m.a)(a,e),Object(s.a)(a,[{key:\"updatedWindowDimensions\",value:function(){if(window.innerWidth<520){var e=this.state.cards.filter(function(e){return\"white\"!==e.backgroundColor});this.setState({cards:e,width:window.innerWidth})}else if(window.innerWidth>520&&20!==this.state.cards.length){var a=this.state.cards;a.push({id:18,cardState:I.HIDING,backgroundColor:\"white\",backgroundImage:\"\"},{id:19,cardState:I.HIDING,backgroundColor:\"white\",backgroundImage:\"\"}),this.setState({cards:a,width:window.innerWidth})}}},{key:\"shuffle\",value:function(e){var a,t,n;for(a=e.length-1;a>0;a--)t=Math.floor(Math.random()*(a+1)),n=e[a],e[a]=e[t],e[t]=n;return e}},{key:\"getAllDogs\",value:function(){for(var e=this,a=[],t=0;t<10;t++)fetch(\"https://dog.ceo/api/breeds/image/random\").then(function(e){return e.json()}).then(function(e){return a.push(e.message)});setTimeout(function(){var t=e.state.cards.map(function(e){switch(e.backgroundColor){case\"red\":return Object(o.a)({},e,{backgroundImage:a[0]});case\"navy\":return Object(o.a)({},e,{backgroundImage:a[1]});case\"yellow\":return Object(o.a)({},e,{backgroundImage:a[2]});case\"green\":return Object(o.a)({},e,{backgroundImage:a[3]});case\"black\":return Object(o.a)({},e,{backgroundImage:a[4]});case\"purple\":return Object(o.a)({},e,{backgroundImage:a[5]});case\"pink\":return Object(o.a)({},e,{backgroundImage:a[6]});case\"lightsky\":return Object(o.a)({},e,{backgroundImage:a[7]});case\"brown\":return Object(o.a)({},e,{backgroundImage:a[8]});case\"white\":return Object(o.a)({},e,{backgroundImage:a[9]});default:return e}});e.setState({cards:t,isVis:!1})},3e3)}},{key:\"componentDidMount\",value:function(){this.getAllDogs(),this.updatedWindowDimensions(),window.addEventListener(\"resize\",this.updatedWindowDimensions)}},{key:\"handleNewGame\",value:function(){var e=this;this.setState({isVis:!0}),setTimeout(function(){e.setState({isVis:!1})},3e3);var a=this.state.cards.map(function(e){return Object(o.a)({},e,{cardState:I.HIDING})});a=this.shuffle(a),this.setState({cards:a,timestart:void 0,isFin:!1,duration:void 0,attempts:void 0,click:0}),this.getAllDogs()}},{key:\"handleClick\",value:function(e){var a=this;this.setState(function(e,a){return{click:e.click+1}}),1===this.state.click&&this.setState({timestart:Math.round((new Date).getTime()/1e3)});var t=function(e,a,t){return e.map(function(e){return a.includes(e.id)?Object(o.a)({},e,{cardState:t}):e})},n=this.state.cards.find(function(a){return a.id===e});if(!this.state.noClick&&n.cardState===I.HIDING){var r=!1,c=t(this.state.cards,[e],I.SHOWING),i=c.filter(function(e){return e.cardState===I.SHOWING}),d=i.map(function(e){return e.id});if(2===i.length&&i[0].backgroundColor===i[1].backgroundColor)c=t(this.state.cards,d,I.MATCHING);else if(2===i.length){var s=t(this.state.cards,d,I.HIDING);r=!0,this.setState({cards:c,noClick:r},function(){setTimeout(function(){a.setState({cards:s,noClick:!1})},1200)})}if(c.filter(function(e){return e.cardState===I.MATCHING}).length===c.length){var l=Math.round((new Date).getTime()/1e3)-this.state.timestart,u=Math.round(this.state.click/2);this.setState({duration:l,attempts:u,isFin:!0},function(){console.log(a.state.duration),console.log(a.state.attempts)})}this.setState({cards:c,noClick:r})}}},{key:\"render\",value:function(){var e=this,a=t(52)(\"load\",{hide:!this.state.isVis,show:this.state.isVis}),n=this.state.cards.map(function(a){return r.a.createElement(k,{key:a.id,opacity:a.cardState===I.MATCHING,showing:a.cardState!==I.HIDING,backgroundColor:a.backgroundColor,backgroundImage:a.backgroundImage,onClick:function(){return e.handleClick(a.id)}})}),c={};return this.state.isVis?this.state.isVis&&(c.display=\"none\"):c.display=\"grid\",r.a.createElement(\"div\",{className:\"container\"},r.a.createElement(b,{onNewGame:this.handleNewGame,isFin:this.state.isFin,duration:this.state.duration,attempts:this.state.attempts}),r.a.createElement(\"div\",{className:\"content\"},r.a.createElement(\"div\",{className:\"cardsContainer\",style:c},n)),r.a.createElement(\"div\",{className:a},r.a.createElement(h,null)))}}]),a}(n.Component);i.a.render(r.a.createElement(f,null),document.getElementById(\"root\"))}},[[17,2,1]]]);","extractedComments":[]}