{"ast":null,"code":"import _objectSpread from \"/Users/ante/Documents/projects/memory/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/ante/Documents/projects/memory/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ante/Documents/projects/memory/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ante/Documents/projects/memory/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ante/Documents/projects/memory/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ante/Documents/projects/memory/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/ante/Documents/projects/memory/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/ante/Documents/projects/memory/src/MemoryGame.js\";\nimport React, { Component } from 'react';\nimport NavBar from './NavBar';\nimport Card from './Card';\nimport Dog from './Dog';\nimport './MemoryGame.css';\nimport { Offline, Online } from \"react-detect-offline\";\nvar CardState = {\n  HIDDING: 0,\n  SHOWING: 1,\n  MATCHING: 2\n};\n\nvar MemoryGame =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MemoryGame, _Component);\n\n  function MemoryGame(props) {\n    var _this;\n\n    _classCallCheck(this, MemoryGame);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MemoryGame).call(this, props)); //the cards I'm using for my state\n\n    var cards = [{\n      id: 0,\n      cardState: CardState.HIDING,\n      backgroundColor: 'red',\n      backgroundImage: ''\n    }, {\n      id: 1,\n      cardState: CardState.HIDING,\n      backgroundColor: 'red',\n      backgroundImage: ''\n    }, {\n      id: 2,\n      cardState: CardState.HIDING,\n      backgroundColor: 'navy',\n      backgroundImage: ''\n    }, {\n      id: 3,\n      cardState: CardState.HIDING,\n      backgroundColor: 'navy',\n      backgroundImage: ''\n    }, {\n      id: 4,\n      cardState: CardState.HIDING,\n      backgroundColor: 'yellow',\n      backgroundImage: ''\n    }, {\n      id: 5,\n      cardState: CardState.HIDING,\n      backgroundColor: 'yellow',\n      backgroundImage: ''\n    }, {\n      id: 6,\n      cardState: CardState.HIDING,\n      backgroundColor: 'green',\n      backgroundImage: ''\n    }, {\n      id: 7,\n      cardState: CardState.HIDING,\n      backgroundColor: 'green',\n      backgroundImage: ''\n    }, {\n      id: 8,\n      cardState: CardState.HIDING,\n      backgroundColor: 'black',\n      backgroundImage: ''\n    }, {\n      id: 9,\n      cardState: CardState.HIDING,\n      backgroundColor: 'black',\n      backgroundImage: ''\n    }, {\n      id: 10,\n      cardState: CardState.HIDING,\n      backgroundColor: 'purple',\n      backgroundImage: ''\n    }, {\n      id: 11,\n      cardState: CardState.HIDING,\n      backgroundColor: 'purple',\n      backgroundImage: ''\n    }, {\n      id: 12,\n      cardState: CardState.HIDING,\n      backgroundColor: 'pink',\n      backgroundImage: ''\n    }, {\n      id: 13,\n      cardState: CardState.HIDING,\n      backgroundColor: 'pink',\n      backgroundImage: ''\n    }, {\n      id: 14,\n      cardState: CardState.HIDING,\n      backgroundColor: 'lightsky',\n      backgroundImage: ''\n    }, {\n      id: 15,\n      cardState: CardState.HIDING,\n      backgroundColor: 'lightsky',\n      backgroundImage: ''\n    }, {\n      id: 16,\n      cardState: CardState.HIDING,\n      backgroundColor: 'brown',\n      backgroundImage: ''\n    }, {\n      id: 17,\n      cardState: CardState.HIDING,\n      backgroundColor: 'brown',\n      backgroundImage: ''\n    }, {\n      id: 18,\n      cardState: CardState.HIDING,\n      backgroundColor: 'white',\n      backgroundImage: ''\n    }, {\n      id: 19,\n      cardState: CardState.HIDING,\n      backgroundColor: 'white',\n      backgroundImage: ''\n    }];\n    cards = _this.shuffle(cards);\n    _this.state = {\n      cards: cards,\n      noClick: false,\n      isVis: true,\n      isFin: false,\n      width: 0,\n      timestart: undefined,\n      attempts: undefined,\n      duration: undefined,\n      click: 0,\n      isMob: false\n    };\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleNewGame = _this.handleNewGame.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getAllDogs = _this.getAllDogs.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.shuffle = _this.shuffle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updatedWindowDimensions = _this.updatedWindowDimensions.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.mobileCheck = _this.mobileCheck.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(MemoryGame, [{\n    key: \"mobileCheck\",\n    value: function mobileCheck() {\n      if (typeof window.orientation !== 'undefined') {\n        this.setState({\n          isMob: true\n        });\n      }\n    }\n  }, {\n    key: \"updatedWindowDimensions\",\n    value: function updatedWindowDimensions() {\n      if (window.innerWidth < 520) {\n        var cards = this.state.cards.filter(function (c) {\n          return c.backgroundColor !== \"white\";\n        });\n        this.setState({\n          cards: cards,\n          width: window.innerWidth\n        });\n      } else if (window.innerWidth > 520 && this.state.cards.length !== 20) {\n        var _cards = this.state.cards;\n\n        _cards.push({\n          id: 18,\n          cardState: CardState.HIDING,\n          backgroundColor: 'white',\n          backgroundImage: ''\n        }, {\n          id: 19,\n          cardState: CardState.HIDING,\n          backgroundColor: 'white',\n          backgroundImage: ''\n        });\n\n        this.setState({\n          cards: _cards,\n          width: window.innerWidth\n        });\n      }\n    }\n  }, {\n    key: \"shuffle\",\n    value: function shuffle(arr) {\n      var i, j, temp;\n\n      for (i = arr.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n      }\n\n      return arr;\n    }\n  }, {\n    key: \"getAllDogs\",\n    value: function getAllDogs() {\n      var _this2 = this;\n\n      var dogs = [];\n\n      for (var i = 0; i < 10; i++) {\n        fetch('https://dog.ceo/api/breeds/image/random').then(function (res) {\n          return res.json();\n        }).then(function (res) {\n          return dogs.push(res.message);\n        });\n      }\n\n      setTimeout(function () {\n        var cards = _this2.state.cards.map(function (c) {\n          switch (c.backgroundColor) {\n            case \"red\":\n              return _objectSpread({}, c, {\n                backgroundImage: dogs[0]\n              });\n\n            case \"navy\":\n              return _objectSpread({}, c, {\n                backgroundImage: dogs[1]\n              });\n\n            case \"yellow\":\n              return _objectSpread({}, c, {\n                backgroundImage: dogs[2]\n              });\n\n            case \"green\":\n              return _objectSpread({}, c, {\n                backgroundImage: dogs[3]\n              });\n\n            case \"black\":\n              return _objectSpread({}, c, {\n                backgroundImage: dogs[4]\n              });\n\n            case \"purple\":\n              return _objectSpread({}, c, {\n                backgroundImage: dogs[5]\n              });\n\n            case \"pink\":\n              return _objectSpread({}, c, {\n                backgroundImage: dogs[6]\n              });\n\n            case \"lightsky\":\n              return _objectSpread({}, c, {\n                backgroundImage: dogs[7]\n              });\n\n            case \"brown\":\n              return _objectSpread({}, c, {\n                backgroundImage: dogs[8]\n              });\n\n            case \"white\":\n              return _objectSpread({}, c, {\n                backgroundImage: dogs[9]\n              });\n\n            default:\n              return c;\n          }\n        });\n\n        _this2.setState({\n          cards: cards,\n          isVis: false\n        });\n      }, 3000);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.mobileCheck();\n      this.getAllDogs();\n      this.updatedWindowDimensions();\n      window.addEventListener(\"resize\", this.updatedWindowDimensions);\n    }\n  }, {\n    key: \"handleNewGame\",\n    value: function handleNewGame() {\n      var _this3 = this;\n\n      // 1.copy all state and set all cards to state of hiding\n      // 2.shuffle the cards\n      this.setState({\n        isVis: true\n      });\n      setTimeout(function () {\n        _this3.setState({\n          isVis: false\n        });\n      }, 3000);\n      var cards = this.state.cards.map(function (c) {\n        return _objectSpread({}, c, {\n          cardState: CardState.HIDING\n        });\n      });\n      cards = this.shuffle(cards);\n      this.setState({\n        cards: cards,\n        timestart: undefined,\n        isFin: false,\n        duration: undefined,\n        attempts: undefined,\n        click: 0\n      });\n      this.getAllDogs();\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(id) {\n      var _this4 = this;\n\n      // console.log(Math.round(new Date().getTime()/1000))\n      //adding click\n      this.setState(function (prevState, props) {\n        return {\n          click: prevState.click + 1\n        };\n      }); //adding first clikc timestamp\n\n      if (this.state.click === 1) {\n        this.setState({\n          timestart: Math.round(new Date().getTime() / 1000)\n        });\n      } // 1.if two cards are visible and they don't match, put back\n      // 2.if two cards are visible and they match, they should stay\n\n\n      var mapCardState = function mapCardState(cards, idsToChange, newCardState) {\n        return cards.map(function (c) {\n          if (idsToChange.includes(c.id)) {\n            return _objectSpread({}, c, {\n              cardState: newCardState\n            });\n          }\n\n          return c;\n        });\n      }; //grabbing the card we want out of the array\n\n\n      var foundCard = this.state.cards.find(function (c) {\n        return c.id === id;\n      }); //prevents flipping card if it's noClick || matching || showing\n\n      if (this.state.noClick || foundCard.cardState !== CardState.HIDING) {\n        return;\n      }\n\n      var noClick = false; //filters all cards, but one that's clicke has SHOWING now\n\n      var cards = mapCardState(this.state.cards, [id], CardState.SHOWING); //finds only cards with SHOWING\n\n      var showingCards = cards.filter(function (c) {\n        return c.cardState === CardState.SHOWING;\n      }); //grabbing ids from showingCards\n\n      var ids = showingCards.map(function (c) {\n        return c.id;\n      });\n\n      if (showingCards.length === 2 && showingCards[0].backgroundColor === showingCards[1].backgroundColor) {\n        cards = mapCardState(this.state.cards, ids, CardState.MATCHING);\n      } else if (showingCards.length === 2) {\n        var hidingCards = mapCardState(this.state.cards, ids, CardState.HIDING);\n        noClick = true;\n        this.setState({\n          cards: cards,\n          noClick: noClick\n        }, function () {\n          setTimeout(function () {\n            // set the state of the cards to HIDING after 1.5 seconds\n            _this4.setState({\n              cards: hidingCards,\n              noClick: false\n            });\n          }, 1200);\n        });\n      } //check for the game end \n\n\n      var allMatching = cards.filter(function (c) {\n        return c.cardState === CardState.MATCHING;\n      });\n\n      if (allMatching.length === cards.length) {\n        var duration = Math.round(new Date().getTime() / 1000) - this.state.timestart;\n        var attempts = Math.round(this.state.click / 2);\n        this.setState({\n          duration: duration,\n          attempts: attempts,\n          isFin: true\n        }, function () {\n          console.log(_this4.state.duration);\n          console.log(_this4.state.attempts);\n        });\n      }\n\n      this.setState({\n        cards: cards,\n        noClick: noClick\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var classNames = require('classnames');\n\n      var loadClass = classNames(\"load\", {\n        \"hide\": !this.state.isVis,\n        \"show\": this.state.isVis\n      });\n      var warClass = classNames({\n        \"hideWar\": !this.state.isMob,\n        \"showWar\": this.state.isMob\n      });\n      var cards = this.state.cards.map(function (card) {\n        return React.createElement(Card, {\n          key: card.id,\n          opacity: card.cardState === CardState.MATCHING,\n          showing: card.cardState !== CardState.HIDING,\n          backgroundColor: card.backgroundColor,\n          backgroundImage: card.backgroundImage,\n          onClick: function onClick() {\n            return _this5.handleClick(card.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 277\n          },\n          __self: this\n        });\n      });\n      var style = {};\n\n      if (!this.state.isVis) {\n        style.display = 'grid';\n      } else if (this.state.isVis) {\n        style.display = 'none';\n      }\n\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297\n        },\n        __self: this\n      }, React.createElement(NavBar, {\n        onNewGame: this.handleNewGame,\n        isFin: this.state.isFin,\n        duration: this.state.duration,\n        attempts: this.state.attempts,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cardsContainer\",\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304\n        },\n        __self: this\n      }, cards)), React.createElement(\"div\", {\n        className: loadClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308\n        },\n        __self: this\n      }, React.createElement(Dog, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: warClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      }, \"Turn device in portrait mode\", React.createElement(\"span\", {\n        className: \"exc\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      }, \"!\"), \" Woof\", React.createElement(\"span\", {\n        className: \"exc\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      }, \"!\"))), React.createElement(Offline, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"showConn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, \"There is a problem with your internet connection\", React.createElement(\"span\", {\n        className: \"exc\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, \"!\"), \" Woof\", React.createElement(\"span\", {\n        className: \"exc\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, \"!\")))));\n    }\n  }]);\n\n  return MemoryGame;\n}(Component);\n\nexport { MemoryGame as default };","map":{"version":3,"sources":["/Users/ante/Documents/projects/memory/src/MemoryGame.js"],"names":["React","Component","NavBar","Card","Dog","Offline","Online","CardState","HIDDING","SHOWING","MATCHING","MemoryGame","props","cards","id","cardState","HIDING","backgroundColor","backgroundImage","shuffle","state","noClick","isVis","isFin","width","timestart","undefined","attempts","duration","click","isMob","handleClick","bind","handleNewGame","getAllDogs","updatedWindowDimensions","mobileCheck","window","orientation","setState","innerWidth","filter","c","length","push","arr","i","j","temp","Math","floor","random","dogs","fetch","then","res","json","message","setTimeout","map","addEventListener","prevState","round","Date","getTime","mapCardState","idsToChange","newCardState","includes","foundCard","find","showingCards","ids","hidingCards","allMatching","console","log","classNames","require","loadClass","warClass","card","style","display"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport NavBar from './NavBar';\nimport Card from './Card';\nimport Dog from './Dog';\nimport './MemoryGame.css';\nimport { Offline, Online } from \"react-detect-offline\";\n\nconst CardState = {\n    HIDDING: 0,\n    SHOWING: 1, \n    MATCHING: 2\n}\n\nexport default class MemoryGame extends Component {\n    constructor(props) {\n        super(props);\n\n\n        //the cards I'm using for my state\n        let cards = [\n            {id: 0, cardState: CardState.HIDING, backgroundColor: 'red', backgroundImage: ''},\n            {id: 1, cardState: CardState.HIDING, backgroundColor: 'red', backgroundImage: ''},\n            {id: 2, cardState: CardState.HIDING, backgroundColor: 'navy', backgroundImage: ''},\n            {id: 3, cardState: CardState.HIDING, backgroundColor: 'navy', backgroundImage: ''},\n            {id: 4, cardState: CardState.HIDING, backgroundColor: 'yellow', backgroundImage: ''},\n            {id: 5, cardState: CardState.HIDING, backgroundColor: 'yellow', backgroundImage: ''},\n            {id: 6, cardState: CardState.HIDING, backgroundColor: 'green', backgroundImage: ''},\n            {id: 7, cardState: CardState.HIDING, backgroundColor: 'green', backgroundImage: ''},\n            {id: 8, cardState: CardState.HIDING, backgroundColor: 'black', backgroundImage: ''},\n            {id: 9, cardState: CardState.HIDING, backgroundColor: 'black', backgroundImage: ''},\n            {id: 10, cardState: CardState.HIDING, backgroundColor: 'purple', backgroundImage: ''},\n            {id: 11, cardState: CardState.HIDING, backgroundColor: 'purple', backgroundImage: ''},\n            {id: 12, cardState: CardState.HIDING, backgroundColor: 'pink', backgroundImage: ''},\n            {id: 13, cardState: CardState.HIDING, backgroundColor: 'pink', backgroundImage: ''},\n            {id: 14, cardState: CardState.HIDING, backgroundColor: 'lightsky', backgroundImage: ''},\n            {id: 15, cardState: CardState.HIDING, backgroundColor: 'lightsky', backgroundImage: ''}, \n            {id: 16, cardState: CardState.HIDING, backgroundColor: 'brown', backgroundImage: ''},\n            {id: 17, cardState: CardState.HIDING, backgroundColor: 'brown', backgroundImage: ''},\n            {id: 18, cardState: CardState.HIDING, backgroundColor: 'white', backgroundImage: ''},\n            {id: 19, cardState: CardState.HIDING, backgroundColor: 'white', backgroundImage: ''}\n        ];\n\n        cards = this.shuffle(cards);\n\n        this.state = {\n            cards, noClick: false, isVis: true, isFin: false, width: 0, timestart: undefined, attempts: undefined, duration: undefined, click: 0, isMob: false\n        };\n\n        this.handleClick = this.handleClick.bind(this);\n        this.handleNewGame = this.handleNewGame.bind(this);\n        this.getAllDogs = this.getAllDogs.bind(this);\n        this.shuffle = this.shuffle.bind(this);\n        this.updatedWindowDimensions = this.updatedWindowDimensions.bind(this);\n        this.mobileCheck = this.mobileCheck.bind(this);\n    }\n\n    mobileCheck() {\n        if(typeof window.orientation !== 'undefined') {\n            this.setState({\n                isMob: true\n            })\n        }\n    }\n    \n    updatedWindowDimensions() {\n        if(window.innerWidth < 520) {\n            let cards = this.state.cards.filter( c =>\n                c.backgroundColor !== \"white\");\n            this.setState({\n                cards, width: window.innerWidth\n            })\n        }\n        else if(window.innerWidth > 520 && this.state.cards.length !== 20) {\n            let cards = this.state.cards;\n            cards.push(\n                {id: 18, cardState: CardState.HIDING, backgroundColor: 'white', backgroundImage: ''},\n                {id: 19, cardState: CardState.HIDING, backgroundColor: 'white', backgroundImage: ''}\n            );\n            this.setState({cards, width: window.innerWidth})\n        }\n    }\n\n\n    shuffle(arr) {\n        var i,\n            j,\n            temp;\n        for (i = arr.length - 1; i > 0; i--) {\n            j = Math.floor(Math.random() * (i + 1));\n            temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n        return arr;    \n    };\n\n    getAllDogs() {\n        let dogs = []\n        for(let i=0; i<10; i++) {\n            fetch('https://dog.ceo/api/breeds/image/random')\n            .then(res => res.json())\n            .then(res => dogs.push(res.message))\n        }\n        \n        setTimeout(\n          () => {\n            let cards = this.state.cards.map( c => {\n\n                switch(c.backgroundColor) {\n\n                    case \"red\":\n                    return {...c, backgroundImage: dogs[0]};\n\n                    case \"navy\":\n                    return {...c, backgroundImage: dogs[1]};\n\n                    case \"yellow\":\n                    return {...c, backgroundImage: dogs[2]};\n\n                    case \"green\":\n                    return {...c, backgroundImage: dogs[3]};\n\n                    case \"black\":\n                    return {...c, backgroundImage: dogs[4]};\n\n                    case \"purple\":\n                    return {...c, backgroundImage: dogs[5]};\n\n                    case \"pink\":\n                    return {...c, backgroundImage: dogs[6]};\n\n                    case \"lightsky\":\n                    return {...c, backgroundImage: dogs[7]};\n\n                    case \"brown\":\n                    return {...c, backgroundImage: dogs[8]};\n\n                    case \"white\":\n                    return {...c, backgroundImage: dogs[9]};\n\n                    default: \n                    return c;\n\n                }\n        })\n            this.setState({cards, isVis: false})\n          }, 3000\n        )\n    }\n\n    componentDidMount() {\n        this.mobileCheck();\n        this.getAllDogs();\n        this.updatedWindowDimensions();\n        window.addEventListener(\"resize\", this.updatedWindowDimensions);\n    }\n\n    handleNewGame() {\n        // 1.copy all state and set all cards to state of hiding\n        // 2.shuffle the cards\n        this.setState({isVis: true})\n        setTimeout(() => {\n            this.setState({isVis: false})\n        }, 3000)\n        let cards = this.state.cards.map(c => ({\n            ...c,\n            cardState: CardState.HIDING\n        }));\n\n        cards = this.shuffle(cards);\n\n        this.setState({cards, timestart: undefined, isFin: false, duration: undefined, attempts: undefined, click: 0});\n\n        this.getAllDogs();\n\n    }\n\n    handleClick(id) {\n        // console.log(Math.round(new Date().getTime()/1000))\n        //adding click\n        this.setState((prevState, props) => {\n            return {\n                click: prevState.click+1\n            }\n        })\n        //adding first clikc timestamp\n        if(this.state.click === 1) {\n            this.setState({\n                timestart: Math.round(new Date().getTime()/1000)\n            })\n        }\n        // 1.if two cards are visible and they don't match, put back\n        // 2.if two cards are visible and they match, they should stay\n\n        const mapCardState = (cards, idsToChange, newCardState) => {\n            return cards.map(c => {\n                if (idsToChange.includes(c.id)) {\n                    return {\n                        ...c, \n                        cardState: newCardState\n                    };\n                }\n                return c;\n            });\n        }\n        //grabbing the card we want out of the array\n\n        const foundCard = this.state.cards.find(c => c.id === id);\n\n        //prevents flipping card if it's noClick || matching || showing\n        if(this.state.noClick || foundCard.cardState !== CardState.HIDING) {\n            return;\n        }\n\n        let noClick = false;\n\n        //filters all cards, but one that's clicke has SHOWING now\n        let cards = mapCardState(this.state.cards, [id], CardState.SHOWING);\n\n        //finds only cards with SHOWING\n        const showingCards = cards.filter(c => c.cardState === CardState.SHOWING);\n    \n        //grabbing ids from showingCards\n        const ids = showingCards.map(c => c.id);\n\n\n        if (showingCards.length === 2 && \n            showingCards[0].backgroundColor === showingCards[1].backgroundColor) {\n                cards = mapCardState(this.state.cards, ids, CardState.MATCHING);  \n            } \n        else if (showingCards.length === 2) {\n           let hidingCards = mapCardState(this.state.cards, ids, CardState.HIDING);\n                \n            noClick = true;\n\n            this.setState({cards, noClick}, () => {\n                setTimeout(() => {\n                    // set the state of the cards to HIDING after 1.5 seconds\n                    this.setState({cards: hidingCards, noClick: false});\n                }, 1200);\n            }\n            );   \n        }\n        //check for the game end \n        let allMatching = cards.filter(c => c.cardState === CardState.MATCHING)\n        if (allMatching.length === cards.length) {\n            let duration = Math.round(new Date().getTime()/1000) - this.state.timestart;\n            let attempts = Math.round(this.state.click / 2);\n            this.setState({\n                duration, attempts, isFin: true\n            }, () => {\n                console.log(this.state.duration)\n                console.log(this.state.attempts)\n            })\n        }\n        this.setState({cards, noClick});\n    }\n\n\n    \n    render() {\n        var classNames = require('classnames');\n        var loadClass = classNames(\n            \"load\",{\n                \"hide\": !this.state.isVis, \n                \"show\" : this.state.isVis\n            }\n        )\n        var warClass = classNames(\n            {\n                \"hideWar\": !this.state.isMob,\n                \"showWar\": this.state.isMob\n            }\n        )\n       \n        const cards = this.state.cards.map((card) => (\n            <Card \n                key={card.id} \n                opacity={card.cardState === CardState.MATCHING}\n                showing={card.cardState !== CardState.HIDING} \n                backgroundColor={card.backgroundColor} \n                backgroundImage={card.backgroundImage}\n                onClick={() => this.handleClick(card.id)}\n            />\n        ));\n\n\n        let style = {};\n        if (!this.state.isVis) {\n            style.display = 'grid'\n        }\n        else if(this.state.isVis) {\n            style.display = 'none'\n        }\n\n        return (\n            <div className=\"container\">\n                <NavBar onNewGame={this.handleNewGame} \n                        isFin={this.state.isFin} \n                        duration={this.state.duration}\n                        attempts={this.state.attempts}\n                />\n                <div className=\"content\">\n                <div className=\"cardsContainer\" style={style}>\n                    {cards}\n                </div>\n                </div>\n                <div className={loadClass}>\n                    <Dog />\n                </div>\n                <div className={warClass}>\n                    <h2>Turn device in portrait mode<span className=\"exc\">!</span> Woof<span className=\"exc\">!</span></h2>\n                </div>\n                <Offline>\n                    <div className=\"showConn\">\n                        <h2>There is a problem with your internet connection<span className=\"exc\">!</span> Woof<span className=\"exc\">!</span></h2>\n                    </div>\n                </Offline>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}