{"ast":null,"code":"import _objectSpread from \"/Users/ante/Documents/projects/memory/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/ante/Documents/projects/memory/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ante/Documents/projects/memory/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ante/Documents/projects/memory/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ante/Documents/projects/memory/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ante/Documents/projects/memory/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/ante/Documents/projects/memory/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/ante/Documents/projects/memory/src/MemoryGame.js\";\nimport React, { Component } from 'react';\nimport NavBar from './NavBar';\nimport Card from './Card';\nimport Dog from './Dog';\nimport './MemoryGame.css';\nimport axios from 'axios';\nvar CardState = {\n  HIDDING: 0,\n  SHOWING: 1,\n  MATCHING: 2\n};\n\nvar MemoryGame =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MemoryGame, _Component);\n\n  function MemoryGame(props) {\n    var _this;\n\n    _classCallCheck(this, MemoryGame);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MemoryGame).call(this, props)); //the cards I'm using for my state\n\n    var cards = [{\n      id: 0,\n      cardState: CardState.HIDING,\n      backgroundColor: 'red',\n      backgroundImage: ''\n    }, {\n      id: 1,\n      cardState: CardState.HIDING,\n      backgroundColor: 'red',\n      backgroundImage: ''\n    }, {\n      id: 2,\n      cardState: CardState.HIDING,\n      backgroundColor: 'navy',\n      backgroundImage: ''\n    }, {\n      id: 3,\n      cardState: CardState.HIDING,\n      backgroundColor: 'navy',\n      backgroundImage: ''\n    }, {\n      id: 4,\n      cardState: CardState.HIDING,\n      backgroundColor: 'yellow',\n      backgroundImage: ''\n    }, {\n      id: 5,\n      cardState: CardState.HIDING,\n      backgroundColor: 'yellow',\n      backgroundImage: ''\n    }, {\n      id: 6,\n      cardState: CardState.HIDING,\n      backgroundColor: 'green',\n      backgroundImage: ''\n    }, {\n      id: 7,\n      cardState: CardState.HIDING,\n      backgroundColor: 'green',\n      backgroundImage: ''\n    }, {\n      id: 8,\n      cardState: CardState.HIDING,\n      backgroundColor: 'black',\n      backgroundImage: ''\n    }, {\n      id: 9,\n      cardState: CardState.HIDING,\n      backgroundColor: 'black',\n      backgroundImage: ''\n    }, {\n      id: 10,\n      cardState: CardState.HIDING,\n      backgroundColor: 'purple',\n      backgroundImage: ''\n    }, {\n      id: 11,\n      cardState: CardState.HIDING,\n      backgroundColor: 'purple',\n      backgroundImage: ''\n    }, {\n      id: 12,\n      cardState: CardState.HIDING,\n      backgroundColor: 'pink',\n      backgroundImage: ''\n    }, {\n      id: 13,\n      cardState: CardState.HIDING,\n      backgroundColor: 'pink',\n      backgroundImage: ''\n    }, {\n      id: 14,\n      cardState: CardState.HIDING,\n      backgroundColor: 'lightsky',\n      backgroundImage: ''\n    }, {\n      id: 15,\n      cardState: CardState.HIDING,\n      backgroundColor: 'lightsky',\n      backgroundImage: ''\n    }, {\n      id: 16,\n      cardState: CardState.HIDING,\n      backgroundColor: 'brown',\n      backgroundImage: ''\n    }, {\n      id: 17,\n      cardState: CardState.HIDING,\n      backgroundColor: 'brown',\n      backgroundImage: ''\n    }, {\n      id: 18,\n      cardState: CardState.HIDING,\n      backgroundColor: 'white',\n      backgroundImage: ''\n    }, {\n      id: 19,\n      cardState: CardState.HIDING,\n      backgroundColor: 'white',\n      backgroundImage: ''\n    }];\n    cards = _this.shuffle(cards);\n    _this.state = {\n      cards: cards,\n      noClick: false,\n      isVis: true,\n      width: 0\n    };\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleNewGame = _this.handleNewGame.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getAllDogs = _this.getAllDogs.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.shuffle = _this.shuffle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updatedWindowDimensions = _this.updatedWindowDimensions.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(MemoryGame, [{\n    key: \"updatedWindowDimensions\",\n    value: function updatedWindowDimensions() {\n      if (window.innerWidth < 520) {\n        var cards = this.state.cards.filter(function (c) {\n          return c.backgroundColor != \"white\";\n        });\n        this.setState({\n          cards: cards,\n          width: window.innerWidth\n        });\n      } else {\n        var _cards = this.state.cards;\n        this.setState({\n          cards: _cards,\n          width: window.innerWidth\n        });\n      }\n    }\n  }, {\n    key: \"shuffle\",\n    value: function shuffle(arr) {\n      var i, j, temp;\n\n      for (i = arr.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n      }\n\n      return arr;\n    }\n  }, {\n    key: \"getAllDogs\",\n    value: function getAllDogs() {\n      var _this2 = this;\n\n      var dogs = [];\n\n      for (var i = 0; i < 10; i++) {\n        fetch('https://dog.ceo/api/breeds/image/random').then(function (res) {\n          return res.json();\n        }).then(function (res) {\n          return dogs.push(res.message);\n        });\n      }\n\n      setTimeout(function () {\n        var cards = _this2.state.cards.map(function (c) {\n          switch (c.backgroundColor) {\n            case \"red\":\n              return _objectSpread({}, c, {\n                backgroundImage: dogs[0]\n              });\n\n            case \"navy\":\n              return _objectSpread({}, c, {\n                backgroundImage: dogs[1]\n              });\n\n            case \"yellow\":\n              return _objectSpread({}, c, {\n                backgroundImage: dogs[2]\n              });\n\n            case \"green\":\n              return _objectSpread({}, c, {\n                backgroundImage: dogs[3]\n              });\n\n            case \"black\":\n              return _objectSpread({}, c, {\n                backgroundImage: dogs[4]\n              });\n\n            case \"purple\":\n              return _objectSpread({}, c, {\n                backgroundImage: dogs[5]\n              });\n\n            case \"pink\":\n              return _objectSpread({}, c, {\n                backgroundImage: dogs[6]\n              });\n\n            case \"lightsky\":\n              return _objectSpread({}, c, {\n                backgroundImage: dogs[7]\n              });\n\n            case \"brown\":\n              return _objectSpread({}, c, {\n                backgroundImage: dogs[8]\n              });\n\n            case \"white\":\n              return _objectSpread({}, c, {\n                backgroundImage: dogs[9]\n              });\n\n            default:\n              return c;\n          }\n        });\n\n        _this2.setState({\n          cards: cards,\n          isVis: false\n        });\n      }, 3000);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getAllDogs();\n      this.updatedWindowDimensions();\n      window.addEventListener(\"resize\", this.updatedWindowDimensions);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener(\"resize\", this.updatedWindowDimensions);\n    }\n  }, {\n    key: \"handleNewGame\",\n    value: function handleNewGame() {\n      var _this3 = this;\n\n      // 1.copy all state and set all cards to state of hiding\n      // 2.shuffle the cards\n      this.setState({\n        isVis: true\n      });\n      setTimeout(function () {\n        _this3.setState({\n          isVis: false\n        });\n      }, 3000);\n      var cards = this.state.cards.map(function (c) {\n        return _objectSpread({}, c, {\n          cardState: CardState.HIDING\n        });\n      });\n      cards = this.shuffle(cards);\n      this.setState({\n        cards: cards\n      });\n      this.getAllDogs();\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(id) {\n      var _this4 = this;\n\n      // 1.if two cards are visible and they don't match, put back\n      // 2.if two cards are visible and they match, they should stay\n      var mapCardState = function mapCardState(cards, idsToChange, newCardState) {\n        return cards.map(function (c) {\n          if (idsToChange.includes(c.id)) {\n            return _objectSpread({}, c, {\n              cardState: newCardState\n            });\n          }\n\n          return c;\n        });\n      }; //grabbing the card we want out of the array\n\n\n      var foundCard = this.state.cards.find(function (c) {\n        return c.id === id;\n      }); //prevents flipping card if it's noClick || matching || showing\n\n      if (this.state.noClick || foundCard.cardState !== CardState.HIDING) {\n        return;\n      }\n\n      var noClick = false; //filters all cards, but one that's clicke has SHOWING now\n\n      var cards = mapCardState(this.state.cards, [id], CardState.SHOWING); //finds only cards with SHOWING\n\n      var showingCards = cards.filter(function (c) {\n        return c.cardState === CardState.SHOWING;\n      }); //grabbing ids from showingCards\n\n      var ids = showingCards.map(function (c) {\n        return c.id;\n      });\n\n      if (showingCards.length === 2 && showingCards[0].backgroundColor === showingCards[1].backgroundColor) {\n        cards = mapCardState(this.state.cards, ids, CardState.MATCHING);\n      } else if (showingCards.length === 2) {\n        var hidingCards = mapCardState(this.state.cards, ids, CardState.HIDING);\n        noClick = true;\n        this.setState({\n          cards: cards,\n          noClick: noClick\n        }, function () {\n          setTimeout(function () {\n            // set the state of the cards to HIDING after 1.5 seconds\n            _this4.setState({\n              cards: hidingCards,\n              noClick: false\n            });\n          }, 1500);\n        });\n      }\n\n      this.setState({\n        cards: cards,\n        noClick: noClick\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var classNames = require('classnames');\n\n      var loadClass = classNames(\"load\", {\n        \"hide\": !this.state.isVis,\n        \"show\": this.state.isVis\n      });\n      var cards = this.state.cards.map(function (card) {\n        return React.createElement(Card, {\n          key: card.id,\n          opacity: card.cardState === CardState.MATCHING,\n          showing: card.cardState !== CardState.HIDING,\n          backgroundColor: card.backgroundColor,\n          backgroundImage: card.backgroundImage,\n          onClick: function onClick() {\n            return _this5.handleClick(card.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240\n          },\n          __self: this\n        });\n      });\n      var style = {};\n\n      if (!this.state.isVis) {\n        style.display = 'grid';\n      } else if (this.state.isVis) {\n        style.display = 'none';\n      }\n\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, React.createElement(NavBar, {\n        onNewGame: this.handleNewGame,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cardsContainer\",\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }, cards)), React.createElement(\"div\", {\n        className: loadClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }, React.createElement(Dog, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return MemoryGame;\n}(Component);\n\nexport { MemoryGame as default };","map":{"version":3,"sources":["/Users/ante/Documents/projects/memory/src/MemoryGame.js"],"names":["React","Component","NavBar","Card","Dog","axios","CardState","HIDDING","SHOWING","MATCHING","MemoryGame","props","cards","id","cardState","HIDING","backgroundColor","backgroundImage","shuffle","state","noClick","isVis","width","handleClick","bind","handleNewGame","getAllDogs","updatedWindowDimensions","window","innerWidth","filter","c","setState","arr","i","j","temp","length","Math","floor","random","dogs","fetch","then","res","json","push","message","setTimeout","map","addEventListener","removeEventListener","mapCardState","idsToChange","newCardState","includes","foundCard","find","showingCards","ids","hidingCards","classNames","require","loadClass","card","style","display"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport NavBar from './NavBar';\nimport Card from './Card';\nimport Dog from './Dog';\nimport './MemoryGame.css';\nimport axios from 'axios';\n\n\nconst CardState = {\n    HIDDING: 0,\n    SHOWING: 1, \n    MATCHING: 2\n}\n\nexport default class MemoryGame extends Component {\n    constructor(props) {\n        super(props);\n\n\n        //the cards I'm using for my state\n        let cards = [\n            {id: 0, cardState: CardState.HIDING, backgroundColor: 'red', backgroundImage: ''},\n            {id: 1, cardState: CardState.HIDING, backgroundColor: 'red', backgroundImage: ''},\n            {id: 2, cardState: CardState.HIDING, backgroundColor: 'navy', backgroundImage: ''},\n            {id: 3, cardState: CardState.HIDING, backgroundColor: 'navy', backgroundImage: ''},\n            {id: 4, cardState: CardState.HIDING, backgroundColor: 'yellow', backgroundImage: ''},\n            {id: 5, cardState: CardState.HIDING, backgroundColor: 'yellow', backgroundImage: ''},\n            {id: 6, cardState: CardState.HIDING, backgroundColor: 'green', backgroundImage: ''},\n            {id: 7, cardState: CardState.HIDING, backgroundColor: 'green', backgroundImage: ''},\n            {id: 8, cardState: CardState.HIDING, backgroundColor: 'black', backgroundImage: ''},\n            {id: 9, cardState: CardState.HIDING, backgroundColor: 'black', backgroundImage: ''},\n            {id: 10, cardState: CardState.HIDING, backgroundColor: 'purple', backgroundImage: ''},\n            {id: 11, cardState: CardState.HIDING, backgroundColor: 'purple', backgroundImage: ''},\n            {id: 12, cardState: CardState.HIDING, backgroundColor: 'pink', backgroundImage: ''},\n            {id: 13, cardState: CardState.HIDING, backgroundColor: 'pink', backgroundImage: ''},\n            {id: 14, cardState: CardState.HIDING, backgroundColor: 'lightsky', backgroundImage: ''},\n            {id: 15, cardState: CardState.HIDING, backgroundColor: 'lightsky', backgroundImage: ''}, \n            {id: 16, cardState: CardState.HIDING, backgroundColor: 'brown', backgroundImage: ''},\n            {id: 17, cardState: CardState.HIDING, backgroundColor: 'brown', backgroundImage: ''},\n            {id: 18, cardState: CardState.HIDING, backgroundColor: 'white', backgroundImage: ''},\n            {id: 19, cardState: CardState.HIDING, backgroundColor: 'white', backgroundImage: ''}\n        ];\n\n        cards = this.shuffle(cards);\n\n        this.state = {\n            cards, noClick: false, isVis: true, width: 0\n        };\n\n        this.handleClick = this.handleClick.bind(this);\n        this.handleNewGame = this.handleNewGame.bind(this);\n        this.getAllDogs = this.getAllDogs.bind(this);\n        this.shuffle = this.shuffle.bind(this);\n        this.updatedWindowDimensions = this.updatedWindowDimensions.bind(this);\n    }\n\n    updatedWindowDimensions() {\n        if(window.innerWidth < 520) {\n            let cards = this.state.cards.filter( c =>\n                c.backgroundColor != \"white\");\n            this.setState({\n                cards, width: window.innerWidth\n            })\n        }\n        else {\n            let cards = this.state.cards;\n            this.setState({\n                cards, width: window.innerWidth\n            })\n        }\n    }\n\n\n    shuffle(arr) {\n        var i,\n            j,\n            temp;\n        for (i = arr.length - 1; i > 0; i--) {\n            j = Math.floor(Math.random() * (i + 1));\n            temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n        return arr;    \n    };\n\n    getAllDogs() {\n        let dogs = []\n        for(let i=0; i<10; i++) {\n            fetch('https://dog.ceo/api/breeds/image/random')\n            .then(res => res.json())\n            .then(res => dogs.push(res.message))\n        }\n        \n    \n        setTimeout(\n          () => {\n            let cards = this.state.cards.map( c => {\n\n                switch(c.backgroundColor) {\n\n                    case \"red\":\n                    return {...c, backgroundImage: dogs[0]};\n\n                    case \"navy\":\n                    return {...c, backgroundImage: dogs[1]};\n\n                    case \"yellow\":\n                    return {...c, backgroundImage: dogs[2]};\n\n                    case \"green\":\n                    return {...c, backgroundImage: dogs[3]};\n\n                    case \"black\":\n                    return {...c, backgroundImage: dogs[4]};\n\n                    case \"purple\":\n                    return {...c, backgroundImage: dogs[5]};\n\n                    case \"pink\":\n                    return {...c, backgroundImage: dogs[6]};\n\n                    case \"lightsky\":\n                    return {...c, backgroundImage: dogs[7]};\n\n                    case \"brown\":\n                    return {...c, backgroundImage: dogs[8]};\n\n                    case \"white\":\n                    return {...c, backgroundImage: dogs[9]};\n\n                    default: \n                    return c;\n\n                }\n        })\n            this.setState({cards, isVis: false})\n          }, 3000\n        )\n    }\n\n    componentDidMount() {\n        this.getAllDogs();\n        this.updatedWindowDimensions();\n        window.addEventListener(\"resize\", this.updatedWindowDimensions);\n        \n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updatedWindowDimensions);\n    }\n\n    handleNewGame() {\n        // 1.copy all state and set all cards to state of hiding\n        // 2.shuffle the cards\n        this.setState({isVis: true})\n        setTimeout(() => {\n            this.setState({isVis: false})\n        }, 3000)\n        let cards = this.state.cards.map(c => ({\n            ...c,\n            cardState: CardState.HIDING\n        }));\n\n        cards = this.shuffle(cards);\n\n        this.setState({cards});\n\n        this.getAllDogs();\n\n    }\n\n    handleClick(id) {\n        // 1.if two cards are visible and they don't match, put back\n        // 2.if two cards are visible and they match, they should stay\n\n        const mapCardState = (cards, idsToChange, newCardState) => {\n            return cards.map(c => {\n                if (idsToChange.includes(c.id)) {\n                    return {\n                        ...c, \n                        cardState: newCardState\n                    };\n                }\n                return c;\n            });\n        }\n        //grabbing the card we want out of the array\n\n        const foundCard = this.state.cards.find(c => c.id === id);\n\n        //prevents flipping card if it's noClick || matching || showing\n        if(this.state.noClick || foundCard.cardState !== CardState.HIDING) {\n            return;\n        }\n\n        let noClick = false;\n\n        //filters all cards, but one that's clicke has SHOWING now\n        let cards = mapCardState(this.state.cards, [id], CardState.SHOWING);\n\n        //finds only cards with SHOWING\n        const showingCards = cards.filter(c => c.cardState === CardState.SHOWING);\n    \n        //grabbing ids from showingCards\n        const ids = showingCards.map(c => c.id);\n\n\n        if (showingCards.length === 2 && \n            showingCards[0].backgroundColor === showingCards[1].backgroundColor) {\n                cards = mapCardState(this.state.cards, ids, CardState.MATCHING);  \n            } \n        else if (showingCards.length === 2) {\n           let hidingCards = mapCardState(this.state.cards, ids, CardState.HIDING);\n                \n            noClick = true;\n\n            this.setState({cards, noClick}, () => {\n                setTimeout(() => {\n                    // set the state of the cards to HIDING after 1.5 seconds\n                    this.setState({cards: hidingCards, noClick: false});\n                }, 1500);\n            }\n            );   \n        }\n        this.setState({cards, noClick});\n    }\n\n\n    \n    render() {\n        var classNames = require('classnames');\n        var loadClass = classNames(\n            \"load\",{\n                \"hide\": !this.state.isVis, \n                \"show\" : this.state.isVis\n            }\n        )\n        const cards = this.state.cards.map((card) => (\n            <Card \n                key={card.id} \n                opacity={card.cardState === CardState.MATCHING}\n                showing={card.cardState !== CardState.HIDING} \n                backgroundColor={card.backgroundColor} \n                backgroundImage={card.backgroundImage}\n                onClick={() => this.handleClick(card.id)}\n            />\n        ));\n\n\n        let style = {};\n        if (!this.state.isVis) {\n            style.display = 'grid'\n        }\n        else if(this.state.isVis) {\n            style.display = 'none'\n        }\n\n        return (\n            <div className=\"container\">\n                <NavBar onNewGame={this.handleNewGame}/>\n                <div className=\"content\">\n                <div className=\"cardsContainer\" style={style}>\n                {cards}\n                </div>\n                </div>\n                <div className={loadClass}>\n                <Dog />\n                </div>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}