{"ast":null,"code":"import _objectSpread from \"/Users/ante/Documents/projects/memory/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/ante/Documents/projects/memory/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ante/Documents/projects/memory/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ante/Documents/projects/memory/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ante/Documents/projects/memory/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ante/Documents/projects/memory/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/ante/Documents/projects/memory/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/ante/Documents/projects/memory/src/MemoryGame.js\";\nimport React, { Component } from 'react';\nimport shuffle from 'shuffle-array';\nimport NavBar from './NavBar';\nimport Card from './Card';\nvar CardState = {\n  HIDDING: 0,\n  SHOWING: 1,\n  MATCHING: 2\n};\n\nvar MemoryGame =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MemoryGame, _Component);\n\n  function MemoryGame(props) {\n    var _this;\n\n    _classCallCheck(this, MemoryGame);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MemoryGame).call(this, props)); //the cards I'm using for my state\n\n    var cards = [{\n      id: 0,\n      cardState: CardState.HIDING,\n      backgroundColor: 'red'\n    }, {\n      id: 1,\n      cardState: CardState.HIDING,\n      backgroundColor: 'red'\n    }, {\n      id: 2,\n      cardState: CardState.HIDING,\n      backgroundColor: 'navy'\n    }, {\n      id: 3,\n      cardState: CardState.HIDING,\n      backgroundColor: 'navy'\n    }, {\n      id: 4,\n      cardState: CardState.HIDING,\n      backgroundColor: 'yellow'\n    }, {\n      id: 5,\n      cardState: CardState.HIDING,\n      backgroundColor: 'yellow'\n    }, {\n      id: 6,\n      cardState: CardState.HIDING,\n      backgroundColor: 'green'\n    }, {\n      id: 7,\n      cardState: CardState.HIDING,\n      backgroundColor: 'green'\n    }, {\n      id: 8,\n      cardState: CardState.HIDING,\n      backgroundColor: 'black'\n    }, {\n      id: 9,\n      cardState: CardState.HIDING,\n      backgroundColor: 'black'\n    }, {\n      id: 10,\n      cardState: CardState.HIDING,\n      backgroundColor: 'purple'\n    }, {\n      id: 11,\n      cardState: CardState.HIDING,\n      backgroundColor: 'purple'\n    }, {\n      id: 12,\n      cardState: CardState.HIDING,\n      backgroundColor: 'pink'\n    }, {\n      id: 13,\n      cardState: CardState.HIDING,\n      backgroundColor: 'pink'\n    }, {\n      id: 14,\n      cardState: CardState.HIDING,\n      backgroundColor: 'lightsky'\n    }, {\n      id: 15,\n      cardState: CardState.HIDING,\n      backgroundColor: 'lightsky'\n    }];\n    cards = shuffle(cards);\n    _this.state = {\n      cards: cards,\n      noClick: false\n    };\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleNewGame = _this.handleNewGame.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(MemoryGame, [{\n    key: \"handleNewGame\",\n    value: function handleNewGame() {\n      // 1.copy all state and set all cards to state of hiding\n      // 2.shuffle the cards\n      var cards = this.state.cards.map(function (c) {\n        return _objectSpread({}, c, {\n          cardState: CardState.HIDING\n        });\n      });\n      cards = shuffle(cards);\n      this.setState({\n        cards: cards\n      });\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(id) {\n      // 1.if two cards are visible and they don't match, put back\n      // 2.if two cards are visible and they match, they should stay\n      var mapCardState = function mapCardState(cards, idsToChange, newCardState) {\n        return cards.map(function (c) {\n          if (idsToChange.includes(c.id)) {\n            return _objectSpread({}, c, {\n              cardState: newCardState\n            });\n          }\n\n          return c;\n        });\n      }; //grabbing the card we want out of the array\n\n\n      var foundCard = this.state.cards.find(function (c) {\n        return c.id === id;\n      }); //prevents flipping card if it's noClick || matching || showing\n\n      if (this.state.noClick || foundCard.cardState !== CardState.HIDING) {\n        return;\n      }\n\n      var noClick = false; //filters all cards, but one that's clicke has SHOWING now\n\n      var cards = mapCardState(this.state.cards, [id], CardState.SHOWING); //finds only cards with SHOWING\n\n      var showingCards = cards.filter(function (c) {\n        return c.cardState === CardState.SHOWING;\n      }); //grabbing ids from showingCards\n\n      var ids = showingCards.map(function (c) {\n        return c.id;\n      });\n\n      if (showingCards.length === 2 && showingCards[0].backgroundColor === showingCards[1].backgroundColor) {\n        cards = mapCardState(this.state.cards, ids, CardState.MATCHING);\n        return;\n      } else if (showingCards.length === 2) {\n        cards = mapCardState(this.state.cards, ids, CardState.HIDDING); // noClick = true;\n        // this.setState({cards, noClick}, () => {\n        //     setTimeout(() => {\n        //         // set the state of the cards to HIDING after 1.5 seconds\n        //         this.setState({cards: hidingCards, noClick: false});\n        //     }, 2000);\n        // }\n        // );\n\n        return;\n      }\n\n      this.setState({\n        cards: cards,\n        noClick: noClick\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var cards = this.state.cards.map(function (card) {\n        return React.createElement(Card, {\n          key: card.id,\n          showing: card.cardState !== CardState.HIDING,\n          backgroundColor: card.backgroundColor,\n          onClick: function onClick() {\n            return _this2.handleClick(card.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(NavBar, {\n        onNewGame: this.handleNewGame,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }), cards);\n    }\n  }]);\n\n  return MemoryGame;\n}(Component);\n\nexport { MemoryGame as default };","map":{"version":3,"sources":["/Users/ante/Documents/projects/memory/src/MemoryGame.js"],"names":["React","Component","shuffle","NavBar","Card","CardState","HIDDING","SHOWING","MATCHING","MemoryGame","props","cards","id","cardState","HIDING","backgroundColor","state","noClick","handleClick","bind","handleNewGame","map","c","setState","mapCardState","idsToChange","newCardState","includes","foundCard","find","showingCards","filter","ids","length","card"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport shuffle from 'shuffle-array';\nimport NavBar from './NavBar';\nimport Card from './Card';\n\n\nconst CardState = {\n    HIDDING: 0,\n    SHOWING: 1, \n    MATCHING: 2\n}\n\nexport default class MemoryGame extends Component {\n    constructor(props) {\n        super(props);\n\n\n        //the cards I'm using for my state\n        let cards = [\n            {id: 0, cardState: CardState.HIDING, backgroundColor: 'red'},\n            {id: 1, cardState: CardState.HIDING, backgroundColor: 'red'},\n            {id: 2, cardState: CardState.HIDING, backgroundColor: 'navy'},\n            {id: 3, cardState: CardState.HIDING, backgroundColor: 'navy'},\n            {id: 4, cardState: CardState.HIDING, backgroundColor: 'yellow'},\n            {id: 5, cardState: CardState.HIDING, backgroundColor: 'yellow'},\n            {id: 6, cardState: CardState.HIDING, backgroundColor: 'green'},\n            {id: 7, cardState: CardState.HIDING, backgroundColor: 'green'},\n            {id: 8, cardState: CardState.HIDING, backgroundColor: 'black'},\n            {id: 9, cardState: CardState.HIDING, backgroundColor: 'black'},\n            {id: 10, cardState: CardState.HIDING, backgroundColor: 'purple'},\n            {id: 11, cardState: CardState.HIDING, backgroundColor: 'purple'},\n            {id: 12, cardState: CardState.HIDING, backgroundColor: 'pink'},\n            {id: 13, cardState: CardState.HIDING, backgroundColor: 'pink'},\n            {id: 14, cardState: CardState.HIDING, backgroundColor: 'lightsky'},\n            {id: 15, cardState: CardState.HIDING, backgroundColor: 'lightsky'}\n        ];\n\n        cards = shuffle(cards);\n        this.state = {\n            cards, noClick: false\n        };\n\n        this.handleClick = this.handleClick.bind(this);\n        this.handleNewGame = this.handleNewGame.bind(this);\n    }\n\n    handleNewGame() {\n        // 1.copy all state and set all cards to state of hiding\n        // 2.shuffle the cards\n\n        let cards = this.state.cards.map(c => ({\n            ...c,\n            cardState: CardState.HIDING\n        }));\n\n        cards = shuffle(cards);\n\n        this.setState({cards});\n\n    }\n\n    handleClick(id) {\n        // 1.if two cards are visible and they don't match, put back\n        // 2.if two cards are visible and they match, they should stay\n\n        const mapCardState = (cards, idsToChange, newCardState) => {\n            return cards.map(c => {\n                if (idsToChange.includes(c.id)) {\n                    return {\n                        ...c, \n                        cardState: newCardState\n                    };\n                }\n                return c;\n            });\n        }\n        //grabbing the card we want out of the array\n\n        const foundCard = this.state.cards.find(c => c.id === id);\n\n        //prevents flipping card if it's noClick || matching || showing\n        if(this.state.noClick || foundCard.cardState !== CardState.HIDING) {\n            return;\n        }\n\n        let noClick = false;\n\n        //filters all cards, but one that's clicke has SHOWING now\n        let cards = mapCardState(this.state.cards, [id], CardState.SHOWING);\n\n        //finds only cards with SHOWING\n        const showingCards = cards.filter(c => c.cardState === CardState.SHOWING);\n\n        //grabbing ids from showingCards\n        const ids = showingCards.map(c => c.id);\n\n\n\n        if (showingCards.length === 2 && \n            showingCards[0].backgroundColor === showingCards[1].backgroundColor) {\n                cards = mapCardState(this.state.cards, ids, CardState.MATCHING);\n                return;\n            } \n        else if (showingCards.length === 2) {\n           cards = mapCardState(this.state.cards, ids, CardState.HIDDING);\n                \n            // noClick = true;\n\n            // this.setState({cards, noClick}, () => {\n            //     setTimeout(() => {\n            //         // set the state of the cards to HIDING after 1.5 seconds\n            //         this.setState({cards: hidingCards, noClick: false});\n            //     }, 2000);\n            // }\n            // );\n            return; \n        }\n\n\n\n        this.setState({cards, noClick});\n    }\n\n\n    \n    render() {\n        const cards = this.state.cards.map((card) => (\n            <Card \n                key={card.id} \n                showing={card.cardState !== CardState.HIDING} \n                backgroundColor={card.backgroundColor} \n                onClick={() => this.handleClick(card.id)}\n            />\n        ));\n\n        return (\n            <div>\n                <NavBar onNewGame={this.handleNewGame}/>\n                {cards}\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}