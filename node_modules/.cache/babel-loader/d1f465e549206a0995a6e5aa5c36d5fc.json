{"ast":null,"code":"import _objectSpread from \"/Users/ante/Documents/projects/memory/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/ante/Documents/projects/memory/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ante/Documents/projects/memory/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ante/Documents/projects/memory/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ante/Documents/projects/memory/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ante/Documents/projects/memory/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/ante/Documents/projects/memory/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/ante/Documents/projects/memory/src/MemoryGame.js\";\nimport React, { Component } from 'react';\nimport shuffle from 'shuffle-array';\nimport NavBar from './NavBar';\nimport Card from './Card';\nimport axios from 'axios';\nvar CardState = {\n  HIDDING: 0,\n  SHOWING: 1,\n  MATCHING: 2\n};\n\nvar MemoryGame =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MemoryGame, _Component);\n\n  function MemoryGame(props) {\n    var _this;\n\n    _classCallCheck(this, MemoryGame);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MemoryGame).call(this, props)); //the cards I'm using for my state\n\n    var cards = [{\n      id: 0,\n      cardState: CardState.HIDING,\n      backgroundColor: 'red'\n    }, {\n      id: 1,\n      cardState: CardState.HIDING,\n      backgroundColor: 'red'\n    }, {\n      id: 2,\n      cardState: CardState.HIDING,\n      backgroundColor: 'navy'\n    }, {\n      id: 3,\n      cardState: CardState.HIDING,\n      backgroundColor: 'navy'\n    }, {\n      id: 4,\n      cardState: CardState.HIDING,\n      backgroundColor: 'yellow'\n    }, {\n      id: 5,\n      cardState: CardState.HIDING,\n      backgroundColor: 'yellow'\n    }, {\n      id: 6,\n      cardState: CardState.HIDING,\n      backgroundColor: 'green'\n    }, {\n      id: 7,\n      cardState: CardState.HIDING,\n      backgroundColor: 'green'\n    }, {\n      id: 8,\n      cardState: CardState.HIDING,\n      backgroundColor: 'black'\n    }, {\n      id: 9,\n      cardState: CardState.HIDING,\n      backgroundColor: 'black'\n    }, {\n      id: 10,\n      cardState: CardState.HIDING,\n      backgroundColor: 'purple'\n    }, {\n      id: 11,\n      cardState: CardState.HIDING,\n      backgroundColor: 'purple'\n    }, {\n      id: 12,\n      cardState: CardState.HIDING,\n      backgroundColor: 'pink'\n    }, {\n      id: 13,\n      cardState: CardState.HIDING,\n      backgroundColor: 'pink'\n    }, {\n      id: 14,\n      cardState: CardState.HIDING,\n      backgroundColor: 'lightsky'\n    }, {\n      id: 15,\n      cardState: CardState.HIDING,\n      backgroundColor: 'lightsky'\n    }];\n    cards = shuffle(cards);\n    _this.state = {\n      cards: cards,\n      noClick: false,\n      dogs: []\n    };\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleNewGame = _this.handleNewGame.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(MemoryGame, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var boxes = Array(8).fill().map(this.getDogPic, this);\n\n      (function () {\n        console.log(boxes);\n      });\n    }\n  }, {\n    key: \"getDogPic\",\n    value: function getDogPic() {\n      var url = \"https://dog.ceo/api/breeds/image/random\";\n      axios.get(url).then(function (res) {\n        return res.data[0];\n      }).catch(function (err) {\n        console.log(\"waiting on pic\");\n      });\n    }\n  }, {\n    key: \"handleNewGame\",\n    value: function handleNewGame() {\n      // 1.copy all state and set all cards to state of hiding\n      // 2.shuffle the cards\n      var cards = this.state.cards.map(function (c) {\n        return _objectSpread({}, c, {\n          cardState: CardState.HIDING\n        });\n      });\n      cards = shuffle(cards);\n      this.setState({\n        cards: cards\n      });\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(id) {\n      var _this2 = this;\n\n      // 1.if two cards are visible and they don't match, put back\n      // 2.if two cards are visible and they match, they should stay\n      var mapCardState = function mapCardState(cards, idsToChange, newCardState) {\n        return cards.map(function (c) {\n          if (idsToChange.includes(c.id)) {\n            return _objectSpread({}, c, {\n              cardState: newCardState\n            });\n          }\n\n          return c;\n        });\n      }; //grabbing the card we want out of the array\n\n\n      var foundCard = this.state.cards.find(function (c) {\n        return c.id === id;\n      }); //prevents flipping card if it's noClick || matching || showing\n\n      if (this.state.noClick || foundCard.cardState !== CardState.HIDING) {\n        return;\n      }\n\n      var noClick = false; //filters all cards, but one that's clicke has SHOWING now\n\n      var cards = mapCardState(this.state.cards, [id], CardState.SHOWING); //finds only cards with SHOWING\n\n      var showingCards = cards.filter(function (c) {\n        return c.cardState === CardState.SHOWING;\n      });\n      console.log(showingCards.length); //grabbing ids from showingCards\n\n      var ids = showingCards.map(function (c) {\n        return c.id;\n      });\n\n      if (showingCards.length === 2 && showingCards[0].backgroundColor === showingCards[1].backgroundColor) {\n        cards = mapCardState(this.state.cards, ids, CardState.MATCHING);\n      } else if (showingCards.length === 2) {\n        var hidingCards = mapCardState(this.state.cards, ids, CardState.HIDING);\n        noClick = true;\n        this.setState({\n          cards: cards,\n          noClick: noClick\n        }, function () {\n          setTimeout(function () {\n            // set the state of the cards to HIDING after 1.5 seconds\n            _this2.setState({\n              cards: hidingCards,\n              noClick: false\n            });\n          }, 1500);\n        });\n      }\n\n      this.setState({\n        cards: cards,\n        noClick: noClick\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var cards = this.state.cards.map(function (card) {\n        return React.createElement(Card, {\n          key: card.id,\n          showing: card.cardState !== CardState.HIDING,\n          backgroundColor: card.backgroundColor,\n          onClick: function onClick() {\n            return _this3.handleClick(card.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(NavBar, {\n        onNewGame: this.handleNewGame,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }), cards);\n    }\n  }]);\n\n  return MemoryGame;\n}(Component);\n\nexport { MemoryGame as default };","map":{"version":3,"sources":["/Users/ante/Documents/projects/memory/src/MemoryGame.js"],"names":["React","Component","shuffle","NavBar","Card","axios","CardState","HIDDING","SHOWING","MATCHING","MemoryGame","props","cards","id","cardState","HIDING","backgroundColor","state","noClick","dogs","handleClick","bind","handleNewGame","boxes","Array","fill","map","getDogPic","console","log","url","get","then","res","data","catch","err","c","setState","mapCardState","idsToChange","newCardState","includes","foundCard","find","showingCards","filter","length","ids","hidingCards","setTimeout","card"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport shuffle from 'shuffle-array';\nimport NavBar from './NavBar';\nimport Card from './Card';\nimport axios from 'axios';\n\n\nconst CardState = {\n    HIDDING: 0,\n    SHOWING: 1, \n    MATCHING: 2\n}\n\nexport default class MemoryGame extends Component {\n    constructor(props) {\n        super(props);\n\n\n        //the cards I'm using for my state\n        let cards = [\n            {id: 0, cardState: CardState.HIDING, backgroundColor: 'red'},\n            {id: 1, cardState: CardState.HIDING, backgroundColor: 'red'},\n            {id: 2, cardState: CardState.HIDING, backgroundColor: 'navy'},\n            {id: 3, cardState: CardState.HIDING, backgroundColor: 'navy'},\n            {id: 4, cardState: CardState.HIDING, backgroundColor: 'yellow'},\n            {id: 5, cardState: CardState.HIDING, backgroundColor: 'yellow'},\n            {id: 6, cardState: CardState.HIDING, backgroundColor: 'green'},\n            {id: 7, cardState: CardState.HIDING, backgroundColor: 'green'},\n            {id: 8, cardState: CardState.HIDING, backgroundColor: 'black'},\n            {id: 9, cardState: CardState.HIDING, backgroundColor: 'black'},\n            {id: 10, cardState: CardState.HIDING, backgroundColor: 'purple'},\n            {id: 11, cardState: CardState.HIDING, backgroundColor: 'purple'},\n            {id: 12, cardState: CardState.HIDING, backgroundColor: 'pink'},\n            {id: 13, cardState: CardState.HIDING, backgroundColor: 'pink'},\n            {id: 14, cardState: CardState.HIDING, backgroundColor: 'lightsky'},\n            {id: 15, cardState: CardState.HIDING, backgroundColor: 'lightsky'}\n        ];\n\n        cards = shuffle(cards);\n        this.state = {\n            cards, noClick: false, dogs: []\n        };\n\n        this.handleClick = this.handleClick.bind(this);\n        this.handleNewGame = this.handleNewGame.bind(this);\n    }\n\n    componentWillMount() {\n        const boxes = Array(8).fill().map(this.getDogPic, this);\n        () => {console.log(boxes)}\n    }\n    getDogPic() {\n            const url = \"https://dog.ceo/api/breeds/image/random\";\n            axios.get(url)\n            .then(function(res) {\n                return res.data[0];\n            })\n            .catch(function(err) {\n                console.log(\"waiting on pic\");\n            })\n        \n    }\n\n    handleNewGame() {\n        // 1.copy all state and set all cards to state of hiding\n        // 2.shuffle the cards\n\n        let cards = this.state.cards.map(c => ({\n            ...c,\n            cardState: CardState.HIDING\n        }));\n\n        cards = shuffle(cards);\n\n        this.setState({cards});\n\n    }\n\n    handleClick(id) {\n        // 1.if two cards are visible and they don't match, put back\n        // 2.if two cards are visible and they match, they should stay\n\n        const mapCardState = (cards, idsToChange, newCardState) => {\n            return cards.map(c => {\n                if (idsToChange.includes(c.id)) {\n                    return {\n                        ...c, \n                        cardState: newCardState\n                    };\n                }\n                return c;\n            });\n        }\n        //grabbing the card we want out of the array\n\n        const foundCard = this.state.cards.find(c => c.id === id);\n\n        //prevents flipping card if it's noClick || matching || showing\n        if(this.state.noClick || foundCard.cardState !== CardState.HIDING) {\n            return;\n        }\n\n        let noClick = false;\n\n        //filters all cards, but one that's clicke has SHOWING now\n        let cards = mapCardState(this.state.cards, [id], CardState.SHOWING);\n\n        //finds only cards with SHOWING\n        const showingCards = cards.filter(c => c.cardState === CardState.SHOWING);\n        console.log(showingCards.length);\n\n        //grabbing ids from showingCards\n        const ids = showingCards.map(c => c.id);\n\n\n\n        if (showingCards.length === 2 && \n            showingCards[0].backgroundColor === showingCards[1].backgroundColor) {\n                cards = mapCardState(this.state.cards, ids, CardState.MATCHING);\n                \n            } \n        else if (showingCards.length === 2) {\n           let hidingCards = mapCardState(this.state.cards, ids, CardState.HIDING);\n                \n            noClick = true;\n\n            this.setState({cards, noClick}, () => {\n                setTimeout(() => {\n                    // set the state of the cards to HIDING after 1.5 seconds\n                    this.setState({cards: hidingCards, noClick: false});\n                }, 1500);\n            }\n            );\n            \n        }\n\n\n\n        this.setState({cards, noClick});\n    }\n\n\n    \n    render() {\n        const cards = this.state.cards.map((card) => (\n            <Card \n                key={card.id} \n                showing={card.cardState !== CardState.HIDING} \n                backgroundColor={card.backgroundColor} \n                onClick={() => this.handleClick(card.id)}\n            />\n        ));\n\n        return (\n            <div>\n                <NavBar onNewGame={this.handleNewGame}/>\n                {cards}\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}