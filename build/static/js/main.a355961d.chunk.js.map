{"version":3,"sources":["NavBar.js","Card.js","Dog.js","MemoryGame.js","index.js"],"names":["NavBar","_ref","onNewGame","react_default","a","createElement","onClick","className","id","Card","props","style","showing","backgroundImage","concat","opacity","filter","border","Dog","CardState","HIDDING","SHOWING","MATCHING","MemoryGame","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","cards","cardState","HIDING","backgroundColor","shuffle","state","noClick","isVis","handleClick","bind","assertThisInitialized","handleNewGame","getAllDogs","arr","i","j","temp","length","Math","floor","random","_this2","dogs","fetch","then","res","json","push","message","setTimeout","map","c","objectSpread","setState","_this3","_this4","mapCardState","idsToChange","newCardState","includes","foundCard","find","showingCards","ids","hidingCards","_this5","loadClass","require","classNames","hide","show","card","src_Card_0","key","display","src_NavBar_0","src_Dog_0","Component","ReactDOM","render","MemoryGame_MemoryGame","document","getElementById"],"mappings":"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","file":"static/js/main.a355961d.chunk.js","sourcesContent":["import React from 'react';\nimport './NavBar.css';\n\nconst NavBar = ({onNewGame}) => (\n    <header>\n        <h2><a>Woof Woof Memory Game</a></h2>\n        <nav>\n            <li><a onClick={onNewGame} className=\"btn\" id=\"slide\">New Game</a></li>\n        </nav>\n    </header>\n);\n\n\n\nexport default NavBar;","import React from 'react';\nimport './Card.css'\n\nconst Card = (props) => {\n    let style = {};\n    if (props.showing) {\n        style.backgroundImage = `url(${props.backgroundImage})`\n    }\n    if (props.opacity) {\n        style.filter = 'grayscale(100%)'\n        style.border = '.18rem solid #000'\n    } \n    return (\n        <div \n            onClick={props.onClick}\n            className=\"card-container\" style={style} \n        >\n        </div>\n    )\n};\n\nexport default Card;","import React from 'react';\nimport './Dog.css';\n\nconst Dog = (props) => {\n    return (\n        <div className=\"bg\">\n  <div id=\"dog\">\n    <div className=\"head\">\n      <div className=\"mask mask-head\">\n         <div className=\"nose\"></div>\n        <div className=\"eye\"></div>\n      </div>\n     <div className=\"ear\"></div>\n    </div>\n      \n    <div className=\"body\">\n      <div className=\"shirt\"></div>\n      <div className=\"mask-body\">\n        <div className=\"leg\"></div>\n      </div>\n      <div className=\"foot\"></div>\n    </div>\n    <div className=\"back-body\">\n      <div className=\"mask-back-body\"></div>\n    </div>\n    <div className=\"mask-tail\"></div>\n    </div>\n\n<div className=\"spinner\">\n  <div className=\"bounce1\"></div>\n  <div className=\"bounce2\"></div>\n  <div className=\"bounce3\"></div>\n</div>\n\n  </div>\n\n    )\n}\n\nexport default Dog;","import React, {Component} from 'react';\nimport NavBar from './NavBar';\nimport Card from './Card';\nimport Dog from './Dog';\nimport './MemoryGame.css';\nimport axios from 'axios';\n\n\nconst CardState = {\n    HIDDING: 0,\n    SHOWING: 1, \n    MATCHING: 2\n}\n\nexport default class MemoryGame extends Component {\n    constructor(props) {\n        super(props);\n\n\n        //the cards I'm using for my state\n        let cards = [\n            {id: 0, cardState: CardState.HIDING, backgroundColor: 'red', backgroundImage: ''},\n            {id: 1, cardState: CardState.HIDING, backgroundColor: 'red', backgroundImage: ''},\n            {id: 2, cardState: CardState.HIDING, backgroundColor: 'navy', backgroundImage: ''},\n            {id: 3, cardState: CardState.HIDING, backgroundColor: 'navy', backgroundImage: ''},\n            {id: 4, cardState: CardState.HIDING, backgroundColor: 'yellow', backgroundImage: ''},\n            {id: 5, cardState: CardState.HIDING, backgroundColor: 'yellow', backgroundImage: ''},\n            {id: 6, cardState: CardState.HIDING, backgroundColor: 'green', backgroundImage: ''},\n            {id: 7, cardState: CardState.HIDING, backgroundColor: 'green', backgroundImage: ''},\n            {id: 8, cardState: CardState.HIDING, backgroundColor: 'black', backgroundImage: ''},\n            {id: 9, cardState: CardState.HIDING, backgroundColor: 'black', backgroundImage: ''},\n            {id: 10, cardState: CardState.HIDING, backgroundColor: 'purple', backgroundImage: ''},\n            {id: 11, cardState: CardState.HIDING, backgroundColor: 'purple', backgroundImage: ''},\n            {id: 12, cardState: CardState.HIDING, backgroundColor: 'pink', backgroundImage: ''},\n            {id: 13, cardState: CardState.HIDING, backgroundColor: 'pink', backgroundImage: ''},\n            {id: 14, cardState: CardState.HIDING, backgroundColor: 'lightsky', backgroundImage: ''},\n            {id: 15, cardState: CardState.HIDING, backgroundColor: 'lightsky', backgroundImage: ''}, \n            {id: 16, cardState: CardState.HIDING, backgroundColor: 'brown', backgroundImage: ''},\n            {id: 17, cardState: CardState.HIDING, backgroundColor: 'brown', backgroundImage: ''},\n            {id: 18, cardState: CardState.HIDING, backgroundColor: 'white', backgroundImage: ''},\n            {id: 19, cardState: CardState.HIDING, backgroundColor: 'white', backgroundImage: ''}\n        ];\n\n        cards = this.shuffle(cards);\n\n        this.state = {\n            cards, noClick: false, isVis: true\n        };\n\n        this.handleClick = this.handleClick.bind(this);\n        this.handleNewGame = this.handleNewGame.bind(this);\n        this.getAllDogs = this.getAllDogs.bind(this);\n        this.shuffle = this.shuffle.bind(this);\n    }\n\n    shuffle(arr) {\n        var i,\n            j,\n            temp;\n        for (i = arr.length - 1; i > 0; i--) {\n            j = Math.floor(Math.random() * (i + 1));\n            temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n        return arr;    \n    };\n\n    getAllDogs() {\n        let dogs = []\n        for(let i=0; i<10; i++) {\n            fetch('https://dog.ceo/api/breeds/image/random')\n            .then(res => res.json())\n            .then(res => dogs.push(res.message))\n        }\n        \n        // {\n        //     axios\n        //     .get('https://dog.ceo/api/breeds/image/random?nocache=' + new Date().getTime())\n        //     //safari and mobile bug solution\n        //     .then( res => {if(dogs.includes(res.data.message)){\n        //         return axios.get('https://dog.ceo/api/breeds/image/random?nocache=' + new Date().getTime())\n        //         .then(res => dogs.push(res.data.message));\n        //         }\n        //         else{\n        //             dogs.push(res.data.message)\n        //         }\n        //         }\n        //     )\n        //     .catch( err => console.log(err))\n        // }\n\n        \n\n\n        // axios.all([\n        //     axios.get('https://dog.ceo/api/breeds/image/random?nocache=' + new Date().getTime()), \n        //     axios.get('https://dog.ceo/api/breeds/image/random?nocache=' + new Date().getTime()), \n        //     axios.get('https://dog.ceo/api/breeds/image/random?nocache=' + new Date().getTime()), \n        //     axios.get('https://dog.ceo/api/breeds/image/random?nocache=' + new Date().getTime()), \n        //     axios.get('https://dog.ceo/api/breeds/image/random?nocache=' + new Date().getTime()), \n        //     axios.get('https://dog.ceo/api/breeds/image/random?nocache=' + new Date().getTime()), \n        //     axios.get('https://dog.ceo/api/breeds/image/random?nocache=' + new Date().getTime()), \n        //     axios.get('https://dog.ceo/api/breeds/image/random?nocache=' + new Date().getTime()), \n        //     axios.get('https://dog.ceo/api/breeds/image/random?nocache=' + new Date().getTime()), \n        //     axios.get('https://dog.ceo/api/breeds/image/random?nocache=' + new Date().getTime()), \n        // ])\n        // .then(axios.spread(\n        //     function(red, navy, yellow, green, black, purple, pink, lightsky, brown, white) {\n        //         dogs.push(red.data.message);\n        //         dogs.push(navy.data.message);\n        //         dogs.push(yellow.data.message);\n        //         dogs.push(green.data.message);\n        //         dogs.push(black.data.message);\n        //         dogs.push(purple.data.message);\n        //         dogs.push(pink.data.message);\n        //         dogs.push(lightsky.data.message);\n        //         dogs.push(brown.data.message);\n        //         dogs.push(white.data.message);\n        //     }\n        // ))\n    \n        setTimeout(\n          () => {\n            let cards = this.state.cards.map( c => {\n\n                switch(c.backgroundColor) {\n\n                    case \"red\":\n                    return {...c, backgroundImage: dogs[0]};\n\n                    case \"navy\":\n                    return {...c, backgroundImage: dogs[1]};\n\n                    case \"yellow\":\n                    return {...c, backgroundImage: dogs[2]};\n\n                    case \"green\":\n                    return {...c, backgroundImage: dogs[3]};\n\n                    case \"black\":\n                    return {...c, backgroundImage: dogs[4]};\n\n                    case \"purple\":\n                    return {...c, backgroundImage: dogs[5]};\n\n                    case \"pink\":\n                    return {...c, backgroundImage: dogs[6]};\n\n                    case \"lightsky\":\n                    return {...c, backgroundImage: dogs[7]};\n\n                    case \"brown\":\n                    return {...c, backgroundImage: dogs[8]};\n\n                    case \"white\":\n                    return {...c, backgroundImage: dogs[9]};\n\n                    default: \n                    return c;\n\n                }\n        })\n            this.setState({cards, isVis: false})\n          }, 7000\n        )\n    }\n\n    componentWillMount() {\n        this.getAllDogs();\n    }\n\n    handleNewGame() {\n        // 1.copy all state and set all cards to state of hiding\n        // 2.shuffle the cards\n        this.setState({isVis: true})\n        setTimeout(() => {\n            this.setState({isVis: false})\n        }, 7000)\n        let cards = this.state.cards.map(c => ({\n            ...c,\n            cardState: CardState.HIDING\n        }));\n\n        cards = this.shuffle(cards);\n\n        this.setState({cards});\n\n        this.getAllDogs();\n\n    }\n\n    handleClick(id) {\n        // 1.if two cards are visible and they don't match, put back\n        // 2.if two cards are visible and they match, they should stay\n\n        const mapCardState = (cards, idsToChange, newCardState) => {\n            return cards.map(c => {\n                if (idsToChange.includes(c.id)) {\n                    return {\n                        ...c, \n                        cardState: newCardState\n                    };\n                }\n                return c;\n            });\n        }\n        //grabbing the card we want out of the array\n\n        const foundCard = this.state.cards.find(c => c.id === id);\n\n        //prevents flipping card if it's noClick || matching || showing\n        if(this.state.noClick || foundCard.cardState !== CardState.HIDING) {\n            return;\n        }\n\n        let noClick = false;\n\n        //filters all cards, but one that's clicke has SHOWING now\n        let cards = mapCardState(this.state.cards, [id], CardState.SHOWING);\n\n        //finds only cards with SHOWING\n        const showingCards = cards.filter(c => c.cardState === CardState.SHOWING);\n    \n        //grabbing ids from showingCards\n        const ids = showingCards.map(c => c.id);\n\n\n        if (showingCards.length === 2 && \n            showingCards[0].backgroundColor === showingCards[1].backgroundColor) {\n                cards = mapCardState(this.state.cards, ids, CardState.MATCHING);  \n            } \n        else if (showingCards.length === 2) {\n           let hidingCards = mapCardState(this.state.cards, ids, CardState.HIDING);\n                \n            noClick = true;\n\n            this.setState({cards, noClick}, () => {\n                setTimeout(() => {\n                    // set the state of the cards to HIDING after 1.5 seconds\n                    this.setState({cards: hidingCards, noClick: false});\n                }, 1500);\n            }\n            );   \n        }\n        this.setState({cards, noClick});\n    }\n\n\n    \n    render() {\n        var classNames = require('classnames');\n        var loadClass = classNames(\n            \"load\",{\n                \"hide\": !this.state.isVis, \n                \"show\" : this.state.isVis\n            }\n        )\n        const cards = this.state.cards.map((card) => (\n            <Card \n                key={card.id} \n                opacity={card.cardState === CardState.MATCHING}\n                showing={card.cardState !== CardState.HIDING} \n                backgroundColor={card.backgroundColor} \n                backgroundImage={card.backgroundImage}\n                onClick={() => this.handleClick(card.id)}\n            />\n        ));\n\n\n        let style = {};\n        if (!this.state.isVis) {\n            style.display = 'grid'\n        }\n        else if(this.state.isVis) {\n            style.display = 'none'\n        }\n\n        return (\n            <div className=\"container\">\n                <NavBar onNewGame={this.handleNewGame}/>\n                <div className=\"content\">\n                <div className=\"cardsContainer\" style={style}>\n                {cards}\n                </div>\n                </div>\n                <div className={loadClass}>\n                <Dog />\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MemoryGame from './MemoryGame';\n\n\nReactDOM.render(<MemoryGame />,\n     document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}