{"version":3,"sources":["NavBar.js","Card.js","Dog.js","MemoryGame.js","index.js"],"names":["NavBar","_ref","onNewGame","isFin","attempts","duration","react_default","a","createElement","onClick","className","id","Card","props","style","showing","backgroundImage","concat","opacity","filter","border","Dog","CardState","HIDDING","SHOWING","MATCHING","MemoryGame","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","cards","cardState","HIDING","backgroundColor","shuffle","state","noClick","isVis","width","timestart","undefined","click","isMob","handleClick","bind","assertThisInitialized","handleNewGame","getAllDogs","updatedWindowDimensions","mobileCheck","window","orientation","setState","innerWidth","c","length","push","arr","i","j","temp","Math","floor","random","_this2","dogs","fetch","then","res","json","message","setTimeout","map","objectSpread","addEventListener","_this3","_this4","prevState","round","Date","getTime","mapCardState","idsToChange","newCardState","includes","foundCard","find","showingCards","ids","hidingCards","console","log","_this5","classNames","require","loadClass","hide","show","warClass","hideWar","showWar","card","src_Card_0","key","display","src_NavBar_0","src_Dog_0","alt","src","Component","ReactDOM","render","MemoryGame_MemoryGame","document","getElementById"],"mappings":"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","file":"static/js/main.e71be124.chunk.js","sourcesContent":["import React from 'react';\nimport './NavBar.css';\n\nconst NavBar = ({onNewGame, isFin, attempts, duration}) => {\n   if(!isFin){\n    return(\n        <header>\n            <h2><a>Woof Woof Memory Game</a></h2>\n            <nav>\n                <li><a onClick={onNewGame} className=\"btn\" id=\"slide\">New Game</a></li>\n            </nav>\n        </header>\n       )\n   }\n   else {\n    return(\n        <header>\n            <h2><a>{attempts} attempts in {duration} sec, Woof!</a></h2>\n            <nav>\n                <li><a onClick={onNewGame} className=\"btn\" id=\"slide\">New Game</a></li>\n            </nav>\n        </header>\n        )\n   }\n   \n   \n   \n};\n\n\n\nexport default NavBar;","import React from 'react';\nimport './Card.css'\n\nconst Card = (props) => {\n    let style = {};\n    if (props.showing) {\n        style.backgroundImage = `url(${props.backgroundImage})`\n    }\n    if (props.opacity) {\n        style.filter = 'grayscale(100%)'\n        style.border = '.18rem solid #000'\n        style.opacity = '.9'\n    } \n    return (\n        <div \n            onClick={props.onClick}\n            className=\"card-container\" style={style} \n        >\n        </div>\n    )\n};\n\nexport default Card;","import React from 'react';\nimport './Dog.css';\n\nconst Dog = (props) => {\n    return (\n        <div className=\"bg\">\n  <div id=\"dog\">\n    <div className=\"head\">\n      <div className=\"mask mask-head\">\n         <div className=\"nose\"></div>\n        <div className=\"eye\"></div>\n      </div>\n     <div className=\"ear\"></div>\n    </div>\n      \n    <div className=\"body\">\n      <div className=\"shirt\"></div>\n      <div className=\"mask-body\">\n        <div className=\"leg\"></div>\n      </div>\n      <div className=\"foot\"></div>\n    </div>\n    <div className=\"back-body\">\n      <div className=\"mask-back-body\"></div>\n    </div>\n    <div className=\"mask-tail\"></div>\n    </div>\n\n<div className=\"spinner\">\n  <div className=\"bounce1\"></div>\n  <div className=\"bounce2\"></div>\n  <div className=\"bounce3\"></div>\n</div>\n\n  </div>\n\n    )\n}\n\nexport default Dog;","import React, {Component} from 'react';\nimport NavBar from './NavBar';\nimport Card from './Card';\nimport Dog from './Dog';\nimport './MemoryGame.css';\n\nconst CardState = {\n    HIDDING: 0,\n    SHOWING: 1, \n    MATCHING: 2\n}\n\nexport default class MemoryGame extends Component {\n    constructor(props) {\n        super(props);\n\n\n        //the cards I'm using for my state\n        let cards = [\n            {id: 0, cardState: CardState.HIDING, backgroundColor: 'red', backgroundImage: ''},\n            {id: 1, cardState: CardState.HIDING, backgroundColor: 'red', backgroundImage: ''},\n            {id: 2, cardState: CardState.HIDING, backgroundColor: 'navy', backgroundImage: ''},\n            {id: 3, cardState: CardState.HIDING, backgroundColor: 'navy', backgroundImage: ''},\n            {id: 4, cardState: CardState.HIDING, backgroundColor: 'yellow', backgroundImage: ''},\n            {id: 5, cardState: CardState.HIDING, backgroundColor: 'yellow', backgroundImage: ''},\n            {id: 6, cardState: CardState.HIDING, backgroundColor: 'green', backgroundImage: ''},\n            {id: 7, cardState: CardState.HIDING, backgroundColor: 'green', backgroundImage: ''},\n            {id: 8, cardState: CardState.HIDING, backgroundColor: 'black', backgroundImage: ''},\n            {id: 9, cardState: CardState.HIDING, backgroundColor: 'black', backgroundImage: ''},\n            {id: 10, cardState: CardState.HIDING, backgroundColor: 'purple', backgroundImage: ''},\n            {id: 11, cardState: CardState.HIDING, backgroundColor: 'purple', backgroundImage: ''},\n            {id: 12, cardState: CardState.HIDING, backgroundColor: 'pink', backgroundImage: ''},\n            {id: 13, cardState: CardState.HIDING, backgroundColor: 'pink', backgroundImage: ''},\n            {id: 14, cardState: CardState.HIDING, backgroundColor: 'lightsky', backgroundImage: ''},\n            {id: 15, cardState: CardState.HIDING, backgroundColor: 'lightsky', backgroundImage: ''}, \n            {id: 16, cardState: CardState.HIDING, backgroundColor: 'brown', backgroundImage: ''},\n            {id: 17, cardState: CardState.HIDING, backgroundColor: 'brown', backgroundImage: ''},\n            {id: 18, cardState: CardState.HIDING, backgroundColor: 'white', backgroundImage: ''},\n            {id: 19, cardState: CardState.HIDING, backgroundColor: 'white', backgroundImage: ''}\n        ];\n\n        cards = this.shuffle(cards);\n\n        this.state = {\n            cards, noClick: false, isVis: true, isFin: false, width: 0, timestart: undefined, attempts: undefined, duration: undefined, click: 0, isMob: false\n        };\n\n        this.handleClick = this.handleClick.bind(this);\n        this.handleNewGame = this.handleNewGame.bind(this);\n        this.getAllDogs = this.getAllDogs.bind(this);\n        this.shuffle = this.shuffle.bind(this);\n        this.updatedWindowDimensions = this.updatedWindowDimensions.bind(this);\n        this.mobileCheck = this.mobileCheck.bind(this);\n    }\n\n    mobileCheck() {\n        if(typeof window.orientation !== 'undefined') {\n            this.setState({\n                isMob: true\n            })\n        }\n    }\n    \n    updatedWindowDimensions() {\n        if(window.innerWidth < 520) {\n            let cards = this.state.cards.filter( c =>\n                c.backgroundColor !== \"white\");\n            this.setState({\n                cards, width: window.innerWidth\n            })\n        }\n        else if(window.innerWidth > 520 && this.state.cards.length !== 20) {\n            let cards = this.state.cards;\n            cards.push(\n                {id: 18, cardState: CardState.HIDING, backgroundColor: 'white', backgroundImage: ''},\n                {id: 19, cardState: CardState.HIDING, backgroundColor: 'white', backgroundImage: ''}\n            );\n            this.setState({cards, width: window.innerWidth})\n        }\n    }\n\n\n    shuffle(arr) {\n        var i,\n            j,\n            temp;\n        for (i = arr.length - 1; i > 0; i--) {\n            j = Math.floor(Math.random() * (i + 1));\n            temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n        return arr;    \n    };\n\n    getAllDogs() {\n        let dogs = []\n        for(let i=0; i<10; i++) {\n            fetch('https://dog.ceo/api/breeds/image/random')\n            .then(res => res.json())\n            .then(res => dogs.push(res.message))\n        }\n        \n    \n        setTimeout(\n          () => {\n            let cards = this.state.cards.map( c => {\n\n                switch(c.backgroundColor) {\n\n                    case \"red\":\n                    return {...c, backgroundImage: dogs[0]};\n\n                    case \"navy\":\n                    return {...c, backgroundImage: dogs[1]};\n\n                    case \"yellow\":\n                    return {...c, backgroundImage: dogs[2]};\n\n                    case \"green\":\n                    return {...c, backgroundImage: dogs[3]};\n\n                    case \"black\":\n                    return {...c, backgroundImage: dogs[4]};\n\n                    case \"purple\":\n                    return {...c, backgroundImage: dogs[5]};\n\n                    case \"pink\":\n                    return {...c, backgroundImage: dogs[6]};\n\n                    case \"lightsky\":\n                    return {...c, backgroundImage: dogs[7]};\n\n                    case \"brown\":\n                    return {...c, backgroundImage: dogs[8]};\n\n                    case \"white\":\n                    return {...c, backgroundImage: dogs[9]};\n\n                    default: \n                    return c;\n\n                }\n        })\n            this.setState({cards, isVis: false})\n          }, 3000\n        )\n    }\n\n    componentDidMount() {\n        this.mobileCheck();\n        this.getAllDogs();\n        this.updatedWindowDimensions();\n        window.addEventListener(\"resize\", this.updatedWindowDimensions);\n    }\n\n    handleNewGame() {\n        // 1.copy all state and set all cards to state of hiding\n        // 2.shuffle the cards\n        this.setState({isVis: true})\n        setTimeout(() => {\n            this.setState({isVis: false})\n        }, 3000)\n        let cards = this.state.cards.map(c => ({\n            ...c,\n            cardState: CardState.HIDING\n        }));\n\n        cards = this.shuffle(cards);\n\n        this.setState({cards, timestart: undefined, isFin: false, duration: undefined, attempts: undefined, click: 0});\n\n        this.getAllDogs();\n\n    }\n\n    handleClick(id) {\n        // console.log(Math.round(new Date().getTime()/1000))\n        //adding click\n        this.setState((prevState, props) => {\n            return {\n                click: prevState.click+1\n            }\n        })\n        //adding first clikc timestamp\n        if(this.state.click === 1) {\n            this.setState({\n                timestart: Math.round(new Date().getTime()/1000)\n            })\n        }\n        // 1.if two cards are visible and they don't match, put back\n        // 2.if two cards are visible and they match, they should stay\n\n        const mapCardState = (cards, idsToChange, newCardState) => {\n            return cards.map(c => {\n                if (idsToChange.includes(c.id)) {\n                    return {\n                        ...c, \n                        cardState: newCardState\n                    };\n                }\n                return c;\n            });\n        }\n        //grabbing the card we want out of the array\n\n        const foundCard = this.state.cards.find(c => c.id === id);\n\n        //prevents flipping card if it's noClick || matching || showing\n        if(this.state.noClick || foundCard.cardState !== CardState.HIDING) {\n            return;\n        }\n\n        let noClick = false;\n\n        //filters all cards, but one that's clicke has SHOWING now\n        let cards = mapCardState(this.state.cards, [id], CardState.SHOWING);\n\n        //finds only cards with SHOWING\n        const showingCards = cards.filter(c => c.cardState === CardState.SHOWING);\n    \n        //grabbing ids from showingCards\n        const ids = showingCards.map(c => c.id);\n\n\n        if (showingCards.length === 2 && \n            showingCards[0].backgroundColor === showingCards[1].backgroundColor) {\n                cards = mapCardState(this.state.cards, ids, CardState.MATCHING);  \n            } \n        else if (showingCards.length === 2) {\n           let hidingCards = mapCardState(this.state.cards, ids, CardState.HIDING);\n                \n            noClick = true;\n\n            this.setState({cards, noClick}, () => {\n                setTimeout(() => {\n                    // set the state of the cards to HIDING after 1.5 seconds\n                    this.setState({cards: hidingCards, noClick: false});\n                }, 1200);\n            }\n            );   \n        }\n        //check for the game end \n        let allMatching = cards.filter(c => c.cardState === CardState.MATCHING)\n        if (allMatching.length === cards.length) {\n            let duration = Math.round(new Date().getTime()/1000) - this.state.timestart;\n            let attempts = Math.round(this.state.click / 2);\n            this.setState({\n                duration, attempts, isFin: true\n            }, () => {\n                console.log(this.state.duration)\n                console.log(this.state.attempts)\n            })\n        }\n        this.setState({cards, noClick});\n    }\n\n\n    \n    render() {\n        var classNames = require('classnames');\n        var loadClass = classNames(\n            \"load\",{\n                \"hide\": !this.state.isVis, \n                \"show\" : this.state.isVis\n            }\n        )\n        var warClass = classNames(\n            {\n                \"hideWar\": !this.state.isMob,\n                \"showWar\": this.state.isMob\n            }\n        )\n        const cards = this.state.cards.map((card) => (\n            <Card \n                key={card.id} \n                opacity={card.cardState === CardState.MATCHING}\n                showing={card.cardState !== CardState.HIDING} \n                backgroundColor={card.backgroundColor} \n                backgroundImage={card.backgroundImage}\n                onClick={() => this.handleClick(card.id)}\n            />\n        ));\n\n\n        let style = {};\n        if (!this.state.isVis) {\n            style.display = 'grid'\n        }\n        else if(this.state.isVis) {\n            style.display = 'none'\n        }\n\n        return (\n            <div className=\"container\">\n                <NavBar onNewGame={this.handleNewGame} \n                        isFin={this.state.isFin} \n                        duration={this.state.duration}\n                        attempts={this.state.attempts}\n                />\n                <div className=\"content\">\n                <div className=\"cardsContainer\" style={style}>\n                {cards}\n                </div>\n                </div>\n                <div className={loadClass}>\n                <Dog />\n                </div>\n                <div className={warClass}>\n                    <h2>Turn device in portrait mode! Woof!</h2>\n                    <img alt=\"rotating_phone\" src=\"%PUBLIC_URL%/rotation.png\"/>\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MemoryGame from './MemoryGame';\n\n\nReactDOM.render(<MemoryGame />,\n     document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}